<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java多线程常见的问题（一）</title>
      <link href="/2018/10/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/10/20/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B8%B8%E8%A7%81%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="Please enter the password to read the blog." />    <label for="pass">Please enter the password to read the blog.</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM垃圾回收机制</title>
      <link href="/2018/10/18/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/10/18/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p> 浅谈JVM垃圾回收</p><a id="more"></a><h3 id="什么是垃圾回收（Garbage-Collection，GC）"><a href="#什么是垃圾回收（Garbage-Collection，GC）" class="headerlink" title="什么是垃圾回收（Garbage Collection，GC）"></a>什么是垃圾回收（Garbage Collection，GC）</h3><p>​    垃圾回收机制：在系统运行过程中，会产生一些无用的对象，这些对象占据着一定的内存，如果不对这些对象清理回收无用对象的内存，可能会导致内存的耗尽，所以垃圾回收机制回收的是内存。同时GC回收的是堆区和方法区的内存。</p><h3 id="哪些内存需要回收"><a href="#哪些内存需要回收" class="headerlink" title="哪些内存需要回收"></a>哪些内存需要回收</h3><p>JVM的内存结构包括五大区域：程序计数器、虚拟机栈、本地方法栈、堆区、方法区。其中程序计数器、虚拟机栈、本地方法栈3个区域随线程而生、随线程而灭，因此这几个区域的内存分配和回收都具备确定性，就不需要过多考虑回收的问题，因为方法结束或者线程结束时，内存自然就跟随着回收了。而Java堆区和方法区则不一样、不一样!(怎么不一样说的朗朗上口)，这部分内存的分配和回收是动态的，正是垃圾收集器所需关注的部分。</p><p>  垃圾收集器在对堆区和方法区进行回收前，首先要确定这些区域的对象哪些可以被回收，哪些暂时还不能回收，这就要用到判断对象是否存活的算法！（面试官肯定没少问你吧）</p><h4 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h4><p><strong>算法分析：</strong><br>  引用计数是垃圾收集器中的早期策略。在这种方法中，堆中每个对象实例都有一个引用计数。当一个对象被创建时，就将该对象实例分配给一个变量，该变量计数设置为1。当任何其它变量被赋值为这个对象的引用时，计数加1（a = b,则b引用的对象实例的计数器+1），但当一个对象实例的某个引用超过了生命周期或者被设置为一个新值时，对象实例的引用计数器减1。任何引用计数器为0的对象实例可以被当作垃圾收集。当一个对象实例被垃圾收集时，它引用的任何对象实例的引用计数器减1。</p><p><strong>优缺点：</strong><br><strong>优点</strong>：引用计数收集器可以很快的执行，交织在程序运行中。对程序需要不被长时间打断的实时环境比较有利。<br><strong>缺点</strong>：无法检测出循环引用。如父对象有一个对子对象的引用，子对象反过来引用父对象。这样，他们的引用计数永远不可能为0。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferenceFindTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyObject object1 = <span class="keyword">new</span> MyObject();</span><br><span class="line">        MyObject object2 = <span class="keyword">new</span> MyObject();</span><br><span class="line">          </span><br><span class="line">        object1.object = object2;</span><br><span class="line">        object2.object = object1;</span><br><span class="line">          </span><br><span class="line">        object1 = <span class="keyword">null</span>;</span><br><span class="line">        object2 = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">这段代码是用来验证引用计数算法不能检测出循环引用。最后面两句将object1和object2赋值为null，也就是说object1和object2指向的对象已经不可能再被访问，但是由于它们互相引用对方，导致它们的引用计数器都不为0，那么垃圾收集器就永远不会回收它们。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="可达性分析算法"><a href="#可达性分析算法" class="headerlink" title="可达性分析算法"></a>可达性分析算法</h4><p>可达性分析算法是从离散数学中的图论引入的，程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点，无用的节点将会被判定为是可回收的对象。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/lDYvXZXQjNOeobTNTHuRcHLDww5D7PQd6yEHjhtWXDk!/r/dDUBAAAAAAAA" alt="可达性分析"><br>上图红色为无用的节点，可以被回收。</p><p>目前Java中可以作为GC ROOT的对象有：<br>1、虚拟机栈中引用的对象（栈帧中的本地变量表）<br>2、方法区中类静态属性引用的对象<br>3、 方法区中常量引用的对象<br>4、本地方法栈中JNI（Native方法）引用的对象<br>基本所有GC算法都引用根搜索算法这种概念。</p><h4 id="Java中的引用你了解多少"><a href="#Java中的引用你了解多少" class="headerlink" title="Java中的引用你了解多少"></a>Java中的引用你了解多少</h4><p>  无论是通过引用计数算法判断对象的引用数量，还是通过可达性分析算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在Java语言中，将引用又分为强引用、软引用、弱引用、虚引用4种，这四种引用强度依次逐渐减弱。</p><ul><li><p>强引用<br>  在程序代码中普遍存在的，类似 <code>Object obj = new Object()</code> 这类引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p></li><li><p>软引用<br>  用来描述一些还有用但并非必须的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收。如果这次回收后还没有足够的内存，才会抛出内存溢出异常。</p></li><li><p>弱引用<br>  也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。</p></li><li><p>虚引用<br>  也叫幽灵引用或幻影引用（名字真会取，很魔幻的样子），是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。它的作用是能在这个对象被收集器回收时收到一个系统通知。</p></li></ul><p>  不要被概念吓到，也别担心，还没跑题，再深入，可就不好说了。罗列这四个概念的目的是为了说明，无论引用计数算法还是可达性分析算法都是基于强引用而言的。</p><h4 id="对象死亡（被回收）前的最后一次挣扎"><a href="#对象死亡（被回收）前的最后一次挣扎" class="headerlink" title="对象死亡（被回收）前的最后一次挣扎"></a>对象死亡（被回收）前的最后一次挣扎</h4><p>  即使在可达性分析算法中不可达的对象，也并非是“非死不可”，这时候它们暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程。</p><p>  <strong>第一次标记</strong>：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记；</p><p>  <strong>第二次标记</strong>：第一次标记后接着会进行一次筛选，筛选的条件是此对象是否有必要执行<code>finalize()</code>方法。在<code>finalize()</code>方法中没有重新与引用链建立关联关系的，将被进行第二次标记。</p><p>  第二次标记成功的对象将真的会被回收，如果对象在<code>finalize()</code>方法中重新与引用链建立了关联关系，那么将会逃离本次回收，继续存活。猿们还跟的上吧，嘿嘿。</p><h4 id="方法区如何判断是否需要回收"><a href="#方法区如何判断是否需要回收" class="headerlink" title="方法区如何判断是否需要回收"></a>方法区如何判断是否需要回收</h4><p>  方法区存储内容是否需要回收的判断可就不一样咯。方法区主要回收的内容有：废弃常量和无用的类。对于废弃常量也可通过引用的可达性来判断，但是对于无用的类则需要同时满足下面3个条件：</p><ul><li>该类所有的实例都已经被回收，也就是Java堆中不存在该类的任何实例；</li><li>加载该类的<code>ClassLoader</code>已经被回收；</li><li>该类对应的<code>java.lang.Class</code>对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。</li></ul><h3 id="常用的垃圾收集算法"><a href="#常用的垃圾收集算法" class="headerlink" title="常用的垃圾收集算法"></a>常用的垃圾收集算法</h3><h4 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h4><p>  标记-清除算法采用从根集合（GC Roots）进行扫描，对存活的对象进行标记，标记完毕后，再扫描整个空间中未被标记的对象，进行回收，如下图所示。</p><p>标记-清除算法不需要进行对象的移动，只需对不存活的对象进行处理，在存活对象比较多的情况下极为高效，但由于标记-清除算法直接回收不存活的对象，因此会造成内存碎片。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/Fv*clFqW5gB3kiO6czOeR8jnt7rfTtU*BDI7Jodi.JI!/r/dFIBAAAAAAAA" alt="标记-清除"></p><h4 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h4><p>  复制算法将内存划分为两个区间，使用此算法时，所有动态分配的对象都只能分配在其中一个区间（活动区间），而另外一个区间（空间区间）则是空闲的。</p><p>复制算法采用从根集合扫描，将存活的对象复制到空闲区间，当扫描完毕活动区间后，会的将活动区间一次性全部回收。此时原本的空闲区间变成了活动区间。下次GC时候又会重复刚才的操作，以此循环。</p><p>复制算法在存活对象比较少的时候，极为高效，但是带来的成本是牺牲一半的内存空间用于进行对象的移动。所以复制算法的使用场景，必须是对象的存活率非常低才行，而且最重要的是，我们需要克服50%内存的浪费。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/yqHoSUt17PQL09A8caB.e26xdKa582DU9nxpVo6YFq0!/r/dDUBAAAAAAAA" alt="复制算法"></p><h4 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h4><p> 标记-整理算法采用 标记-清除 算法一样的方式进行对象的标记、清除，但在回收不存活的对象占用的空间后，会将所有存活的对象往左端空闲空间移动，并更新对应的指针。标记-整理 算法是在标记-清除 算法之上，又进行了对象的移动排序整理，因此成本更高，但却解决了内存碎片的问题。</p><p>JVM为了优化内存的回收，使用了分代回收的方式，对于新生代内存的回收（Minor GC）主要采用复制算法。而对于老年代的回收（Major GC），大多采用标记-整理算法。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/F.tsxIPLMNPWN5zUe*6S38K2XurwZ*WkKkrc14mxqEE!/r/dFMBAAAAAAAA" alt="标记-整理"></p><h4 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>  分代收集算法是目前大部分JVM的垃圾收集器采用的算法。它的核心思想是根据对象存活的生命周期将内存划分为若干个不同的区域。一般情况下将堆区划分为老年代（Tenured Generation）和新生代（Young Generation），在堆区之外还有一个代就是永久代（Permanet Generation）。老年代的特点是每次垃圾收集时只有少量对象需要被回收，而新生代的特点是每次垃圾回收时都有大量的对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/R84nWZNCECSMxoulvAeJj5GGu4ajqIgR5OPfmq1G2U4!/r/dFMBAAAAAAAA" alt="分代回收"></p><h5 id="年轻代（Young-Generation）的回收算法"><a href="#年轻代（Young-Generation）的回收算法" class="headerlink" title="年轻代（Young Generation）的回收算法"></a>年轻代（Young Generation）的回收算法</h5><p>a) 所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集掉那些生命周期短的对象。</p><p>b) 新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区，此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空， 如此往复。</p><p>c) 当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收。</p><p>d) 新生代发生的GC也叫做Minor GC，MinorGC发生频率比较高(不一定等Eden区满了才触发)。</p><h5 id="年老代（Old-Generation）的回收算法"><a href="#年老代（Old-Generation）的回收算法" class="headerlink" title="年老代（Old Generation）的回收算法"></a>年老代（Old Generation）的回收算法</h5><p>a) 在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。</p><p>b) 内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。</p><h5 id="持久代（Permanent-Generation）的回收算法"><a href="#持久代（Permanent-Generation）的回收算法" class="headerlink" title="持久代（Permanent Generation）的回收算法"></a>持久代（Permanent Generation）的回收算法</h5><p>  用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。持久代也称方法区，具体的回收可参见上文2.5节。</p><h3 id="常见的垃圾收集器"><a href="#常见的垃圾收集器" class="headerlink" title="常见的垃圾收集器"></a>常见的垃圾收集器</h3><p>下面一张图是HotSpot虚拟机包含的所有收集器 </p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/Mqs8TfbQaGuH.6jXWqKl0dLfLxSa76v3.XHGtTkembA!/r/dDQBAAAAAAAA" alt="垃圾收集器"></p><ul><li>Serial收集器（复制算法)<br>新生代单线程收集器，标记和清理都是单线程，优点是简单高效。是client级别默认的GC方式，可以通过<code>-XX:+UseSerialGC</code>来强制指定。</li><li>Serial Old收集器(标记-整理算法)<br>老年代单线程收集器，Serial收集器的老年代版本。</li><li>ParNew收集器(停止-复制算法)　<br>新生代收集器，可以认为是Serial收集器的多线程版本,在多核CPU环境下有着比Serial更好的表现。</li><li>Parallel Scavenge收集器(停止-复制算法)<br>并行收集器，追求高吞吐量，高效利用CPU。吞吐量一般为99%， 吞吐量= 用户线程时间/(用户线程时间+GC线程时间)。适合后台应用等对交互相应要求不高的场景。是server级别默认采用的GC方式，可用<code>-XX:+UseParallelGC</code>来强制指定，用<code>-XX:ParallelGCThreads=4</code>来指定线程数。</li><li>Parallel Old收集器(停止-复制算法)<br>Parallel Scavenge收集器的老年代版本，并行收集器，吞吐量优先。</li><li>CMS(Concurrent Mark Sweep)收集器（标记-清理算法）<br>高并发、低停顿，追求最短GC回收停顿时间，cpu占用比较高，响应时间快，停顿时间短，多核cpu 追求高响应时间的选择。</li></ul><h3 id="GC是什么时候触发的"><a href="#GC是什么时候触发的" class="headerlink" title="GC是什么时候触发的"></a>GC是什么时候触发的</h3><p><strong>新生代 GC（Minor GC）</strong>：指发生在新生代的垃圾收集动作，因为 Java 对象大多都具备朝生夕灭的特性，所以 Minor GC 非常频繁，一般回收速度也比较快。</p><p><strong>老年代 GC（Major GC  / Full GC）</strong>：指发生在老年代的 GC，出现了 Major GC，经常会伴随至少一次的 Minor GC（但非绝对的，在 ParallelScavenge 收集器的收集策略里就有直接进行 Major GC 的策略选择过程） 。MajorGC 的速度一般会比 Minor GC 慢 10倍以上。</p><p><strong>Minor GC触发机制：</strong><br>当年轻代满时就会触发Minor GC，这里的年轻代满指的是Eden代满，Survivor满不会引发GC</p><p><strong>Full GC触发机制：</strong>对整个堆进行整理，包括Young、Tenured和Perm。Full GC因为需要对整个堆进行回收，所以比较慢，因此应该尽可能减少Full GC的次数。在对JVM调优的过程中，很大一部分工作就是对于Full GC的调节。有如下原因可能导致Full GC：<br>a) 年老代（Tenured）被写满；<br>b) 持久代（Perm）被写满；<br>c) System.gc()被显示调用；<br>d) 上一次GC之后Heap的各域分配策略动态变化；</p><p>其中Minor GC如下图所示</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/Xa1psIrYG3XC3jdIG1Hz7FJGibT53KvVPK96FwurT8A!/r/dDQBAAAAAAAA" alt="Minor GC"></p><p>​    虚拟机给每个对象定义了一个对象年龄（Age）计数器。如果对象在 Eden 出生并经过第一次 Minor GC 后仍然存活，并且能被 Survivor 容纳的话，将被移动到 Survivor 空间中，并将对象年龄设为 1。对象在 Survivor 区中每熬过一次 Minor GC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15 岁）时，就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数 -XX:MaxTenuringThreshold (阈值)来设置。</p><h3 id="减少GC开销的措施"><a href="#减少GC开销的措施" class="headerlink" title="减少GC开销的措施"></a>减少GC开销的措施</h3><p>　　根据上述GC的机制,程序的运行会直接影响系统环境的变化,从而影响GC的触发。若不针对GC的特点进行设计和编码,就会出现内存驻留等一系列负面影响。为了避免这些影响,基本的原则就是尽可能地减少垃圾和减少GC过程中的开销。具体措施包括以下几个方面:</p><p>(1)不要显式调用System.gc()</p><p>　　此函数建议JVM进行主GC,虽然只是建议而非一定,但很多情况下它会触发主GC,从而增加主GC的频率,也即增加了间歇性停顿的次数。</p><p>(2)尽量减少临时对象的使用</p><p>　　临时对象在跳出函数调用后,会成为垃圾,少用临时变量就相当于减少了垃圾的产生,从而延长了出现上述第二个触发条件出现的时间,减少了主GC的机会。</p><p>(3)对象不用时最好显式置为Null</p><p>　　一般而言,为Null的对象都会被作为垃圾处理,所以将不用的对象显式地设为Null,有利于GC收集器判定垃圾,从而提高了GC的效率。</p><p>(4)尽量使用StringBuffer,而不用String来累加字符串</p><p>　　由于String是固定长的字符串对象,累加String对象时,并非在一个String对象中扩增,而是重新创建新的String对象,如Str5=Str1+Str2+Str3+Str4,这条语句执行过程中会产生多个垃圾对象,因为对次作“+”操作时都必须创建新的String对象,但这些过渡对象对系统来说是没有实际意义的,只会增加更多的垃圾。避免这种情况可以改用StringBuffer来累加字符串,因StringBuffer是可变长的,它在原有基础上进行扩增,不会产生中间对象。</p><p>(5)能用基本类型如Int,Long,就不用Integer,Long对象</p><p>　　基本类型变量占用的内存资源比相应对象占用的少得多,如果没有必要,最好使用基本变量。</p><p>(6)尽量少用静态对象变量</p><p>　　静态变量属于全局变量,不会被GC回收,它们会一直占用内存。</p><p>(7)分散对象创建或删除的时间</p><p>　　集中在短时间内大量创建新对象,特别是大对象,会导致突然需要大量内存,JVM在面临这种情况时,只能进行主GC,以回收内存或整合内存碎片,从而增加主GC的频率。集中删除对象,道理也是一样的。它使得突然出现了大量的垃圾对象,空闲空间必然减少,从而大大增加了下一次创建新对象时强制主GC的机会。</p><h3 id="GC相关的JVM参数"><a href="#GC相关的JVM参数" class="headerlink" title="GC相关的JVM参数"></a>GC相关的JVM参数</h3><p>伊甸园（Eden）：这是对象最初诞生的区域，并且对大多数对象来说，这里是它们唯一存在过的区域。<br> 幸存者乐园（Survivor）：从伊甸园幸存下来的对象会被挪到这里。<br> 终身颐养园（Tenured）：这是足够老的幸存对象的归宿。年轻代收集（Minor-GC）过程是不会触及这个地方的。当年轻代收集不能把对象放进终身颐养园时，就会触发一次完全收集（Major-GC），这里可能还会牵扯到压缩，以便为大对象腾出足够的空间。<br>与垃圾回收相关的JVM参数：<br> -Xms / -Xmx — 堆的初始大小 / 堆的最大大小<br> -Xmn — 堆中年轻代的大小<br> -XX:-DisableExplicitGC — 让System.gc()不产生任何作用<br> -XX:+PrintGCDetail — 打印GC的细节<br>-XX:+PrintGCDateStamps — 打印GC操作的时间戳</p><h3 id="关于垃圾回收的几点补充"><a href="#关于垃圾回收的几点补充" class="headerlink" title="关于垃圾回收的几点补充"></a>关于垃圾回收的几点补充</h3><p>经过上述的说明，可以发现垃圾回收有以下的几个特点：<br>（1）垃圾收集发生的不可预知性：由于实现了不同的垃圾回收算法和采用了不同的收集机制，所以它有可能是定时发生，有可能是当出现系统空闲CPU资源时发生，也有可能是和原始的垃圾收集一样，等到内存消耗出现极限时发生，这与垃圾收集器的选择和具体的设置都有关系。</p><p>（2）垃圾收集的精确性：主要包括2 个方面：</p><p>​    （a）垃圾收集器能够精确标记活着的对象；</p><p>​    （b）垃圾收集器能够精确地定位对象之间的引用关系。前者是完全地回收所有废弃对象的前提，否则就可能造成内存泄漏。而后者则是实现归并和复制等算法的必要条件。所有不可达对象都能够可靠地得到回收，所有对象都能够重新分配，允许对象的复制和对象内存的缩并，这样就有效地防止内存的支离破碎。</p><p>（3）现在有许多种不同的垃圾收集器，每种有其算法且其表现各异，既有当垃圾收集开始时就停止应用程序的运行，又有当垃圾收集开始时也允许应用程序的线程运行，还有在同一时间垃圾收集多线程运行。</p><p>（4）垃圾收集的实现和具体的JVM 以及JVM的内存模型有非常紧密的关系。不同的JVM 可能采用不同的垃圾收集，而JVM 的内存模型决定着该JVM可以采用哪些类型垃圾收集。现在，HotSpot 系列JVM中的内存系统都采用先进的面向对象的框架设计，这使得该系列JVM都可以采用最先进的垃圾收集。</p><p>（5）随着技术的发展，现代垃圾收集技术提供许多可选的垃圾收集器，而且在配置每种收集器的时候又可以设置不同的参数，这就使得根据不同的应用环境获得最优的应用性能成为可能。</p><p>针对以上特点，我们在使用的时候要注意：</p><p>　　（1）不要试图去假定垃圾收集发生的时间，这一切都是未知的。比如，方法中的一个临时对象在方法调用完毕后就变成了无用对象，这个时候它的内存就可以被释放。</p><p>　　（2）Java中提供了一些和垃圾收集打交道的类，而且提供了一种强行执行垃圾收集的方法–调用System.gc()，但这同样是个不确定的方法。Java 中并不保证每次调用该方法就一定能够启动垃圾收集，它只不过会向JVM发出这样一个申请，到底是否真正执行垃圾收集，一切都是个未知数。</p><p>　　（3）挑选适合自己的垃圾收集器。一般来说，如果系统没有特殊和苛刻的性能要求，可以采用JVM的缺省选项。否则可以考虑使用有针对性的垃圾收集器，比如增量收集器就比较适合实时性要求较高的系统之中。系统具有较高的配置，有比较多的闲置资源，可以考虑使用并行标记/清除收集器。</p><p>　　（4）关键的也是难把握的问题是内存泄漏。良好的编程习惯和严谨的编程态度永远是最重要的，不要让自己的一个小错误导致内存出现大漏洞。</p><p>　　（5）尽早释放无用对象的引用。大多数程序员在使用临时变量的时候，都是让引用变量在退出活动域(scope)后，自动设置为null，暗示垃圾收集器来收集该对象，还必须注意该引用的对象是否被监听，如果有，则要去掉监听器，然后再赋空值。</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉堆&amp;堆排序</title>
      <link href="/2018/10/17/%E4%BA%8C%E5%8F%89%E5%A0%86&amp;%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>/2018/10/17/%E4%BA%8C%E5%8F%89%E5%A0%86&amp;%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>二叉堆&amp;堆排序</p><a id="more"></a><h3 id="什么是二叉堆？"><a href="#什么是二叉堆？" class="headerlink" title="什么是二叉堆？"></a>什么是二叉堆？</h3><p>二叉堆本质上是一种完全二叉树，它分为两个类型：<br>1.最大堆（max heap，又称大顶堆、大根堆）<br>2.最小堆（min heap，又称小顶堆、小根堆）</p><p>最大堆就是任何一个父节点的值，都<strong>大于等于</strong>它左右孩子节点的值。<br>同理，最小堆就是任何一个父节点的值，都<strong>小于等于</strong>它左右孩子节点的值。</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/02RjZmVOmzSQNBkjFfj6s4Fxdvncll2CEULtl5EqwTA!/r/dFQBAAAAAAAA" alt="最大堆"></p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/S7ORZliSIO7GgjL3ahPlJKvOKQCpJCdw31cFxxLvyHc!/r/dDUBAAAAAAAA" alt="最小堆"></p><h3 id="如何构建一个堆"><a href="#如何构建一个堆" class="headerlink" title="如何构建一个堆"></a>如何构建一个堆</h3><p>构建堆主要依靠堆得自我调整</p><p><strong>堆的自我调整</strong><br>对于二叉堆，如下有几种操作：<br><strong>插入节点</strong><br><strong>删除节点</strong><br><strong>构建二叉堆</strong></p><p>这几种操作都是基于堆的自我调整。</p><p>下面让我们以最小堆为例，看一看二叉堆是如何进行自我调整的。</p><h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>二叉堆的节点插入，插入位置是完全二叉树的最后一个位置。比如我们插入一个新节点，值是 0。</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/W8nJQHVrmQOaHUq9CfuKDUfrXXQNUqYXFTkhFiGQsAE!/r/dFIBAAAAAAAA" alt=""></p><p>这时候，我们让节点0的它的父节点5做比较，如果0小于5，则让新节点“上浮”，和父节点交换位置。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/KEnGkhfcqdyqF.Vusgkjf79keZAESXFeWXqIGQnEGiw!/r/dFMBAAAAAAAA" alt=""></p><p>继续用节点0和父节点3做比较，如果0小于3，则让新节点继续“上浮”。</p><p> <img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/Vs4jOEofrKMOpI.GyiafVjjEfNxVKVwrHK72ZaiQvZY!/r/dC4BAAAAAAAA" alt=""></p><p>继续比较，最终让新节点0上浮到了堆顶位置。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/r8yInctF*olqNmCtS1qtYom6PtoqO5BD0KFDaHzHqn4!/r/dFYAAAAAAAAA" alt=""></p><h4 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h4><p>二叉堆的节点删除过程和插入过程正好相反，所删除的是处于堆顶的节点。比如我们删除最小堆的堆顶节点1。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/tkZv0IIAGvUlMzoeVAhucvMMffscWZHDo*SPx7JSiwo!/r/dDABAAAAAAAA" alt=""></p><p>这时候，为了维持完全二叉树的结构，我们把堆的最后一个节点10补到原本堆顶的位置。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/u8IGEj*xX8CZcvGVg0ab7P.iXgD9en9D9yxGOgfP*0s!/r/dFQBAAAAAAAA" alt=""></p><p>接下来我们让移动到堆顶的节点10和它的左右孩子进行比较，如果左右孩子中最小的一个（显然是节点2）比节点10小，那么让节点10“下沉”。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/cpBTflmb6LV6UI4*dTHN5NpZ0FU5.3P0ScxU26Hy46s!/r/dEgBAAAAAAAA" alt=""></p><p>继续让节点10和它的左右孩子做比较，左右孩子中最小的是节点7，由于10大于7，让节点10继续“下沉”。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/Iiuw6vYp3TqDdqpO0A.pfcW*3K3s9iuq4U*LtNJaA.M!/r/dFMBAAAAAAAA" alt=""></p><p>这样一来，二叉堆重新得到了调整。 </p><h4 id="构建二叉堆"><a href="#构建二叉堆" class="headerlink" title="构建二叉堆"></a>构建二叉堆</h4><p>构建二叉堆，也就是把一个无序的完全二叉树调整为二叉堆，本质上就是让<strong>所有非叶子节点依次下沉。</strong></p><p>我们举一个无序完全二叉树的例子：</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/eH82ZgLTC*EthFPKCWggIYCvq6HhvfvwmsezRucTPLE!/r/dDQBAAAAAAAA" alt=""></p><p>首先，我们从最后一个<strong>非叶子</strong>节点开始，也就是从节点10开始。如果节点10大于它左右孩子中最小的一个，则节点10下沉。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/Aw.NawANmDIjLIarD*ziam0b18r9IckU3k6PTa0UI7A!/r/dFIBAAAAAAAA" alt=""></p><p>接下来轮到节点3，如果节点3大于它左右孩子中最小的一个，则节点3下沉。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/hfz2grJOFY70xKHiTlXr046HVXZqwYNMigkKY3evSFk!/r/dDEBAAAAAAAA" alt=""></p><p>接下来轮到节点1，如果节点1大于它左右孩子中最小的一个，则节点1下沉。事实上节点1小于它的左右孩子，所以不用改变。</p><p>接下来轮到节点7，如果节点7大于它左右孩子中最小的一个，则节点7下沉。</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/H*Mz3OjVVq6Q5UGUtD9TvO2O9mzKq*0oagJ5yO5GKoM!/r/dGcBAAAAAAAA" alt=""></p><p>节点7继续比较，继续下沉。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/e8VNKIC5cqEe*7XJG1W9i9iSe4.jChhI8Xm3BnGW*v4!/r/dDMBAAAAAAAA" alt=""></p><p>这样一来，一颗无序的完全二叉树就构建成了一个最小堆。 </p><h3 id="堆的代码实现"><a href="#堆的代码实现" class="headerlink" title="堆的代码实现"></a>堆的代码实现</h3><p>在撸代码之前，我们还需要明确一点：</p><p>二叉堆虽然是一颗完全二叉树，但它的存储方式并不是链式存储，而是顺序存储。换句话说，二叉堆的所有节点都存储在数组当中。</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/JyU0WRCkHw1KHBsEA*.2jRENRw8wbPTYlBwpP.Yr5Cc!/r/dEcBAAAAAAAA" alt=""></p><p>数组中，在没有左右指针的情况下，如何定位到一个父节点的左孩子和右孩子呢？</p><p>像图中那样，我们可以依靠数组下标来计算。</p><p>假设父节点的下标是parent，那么它的左孩子下标就是 <strong>2*parent+1</strong>；它的右孩子下标就是  <strong>2*parent+2</strong> 。</p><p>比如上面例子中，节点6包含9和10两个孩子，节点6在数组中的下标是3，节点9在数组中的下标是7，节点10在数组中的下标是8。</p><p>7 = 3*2+1</p><p>8 = 3*2+2</p><p>刚好符合规律。</p><p>有了这个前提，下面的代码就更好理解了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapOperator</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 上浮调整</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> *            待调整的堆</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">upAdjust</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> childIndex = array.length - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> parentIndex = (childIndex - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="comment">// temp保存插入的叶子节点值，用于最后的赋值</span></span><br><span class="line"><span class="keyword">int</span> temp = array[childIndex];</span><br><span class="line"><span class="keyword">while</span> (childIndex &gt; <span class="number">0</span> &amp;&amp; temp &lt; array[parentIndex]) &#123;</span><br><span class="line"><span class="comment">// 无需真正交换，单向赋值即可</span></span><br><span class="line">array[childIndex] = array[parentIndex];</span><br><span class="line">childIndex = parentIndex;</span><br><span class="line">parentIndex = (parentIndex - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">array[childIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 下沉调整</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> *            待调整的堆</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentIndex</span></span><br><span class="line"><span class="comment"> *            要下沉的父节点</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentIndex</span></span><br><span class="line"><span class="comment"> *            堆的有效大小</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> parentIndex, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="comment">// temp保存父节点值，用于最后的赋值</span></span><br><span class="line"><span class="keyword">int</span> temp = array[parentIndex];</span><br><span class="line"><span class="keyword">int</span> childIndex = <span class="number">2</span> * parentIndex + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (childIndex &lt; length) &#123;</span><br><span class="line"><span class="comment">// 如果有右孩子，且右孩子小于左孩子的值，则定位到右孩子</span></span><br><span class="line"><span class="keyword">if</span> (childIndex + <span class="number">1</span> &lt; length &amp;&amp; array[childIndex + <span class="number">1</span>] &lt; array[childIndex]) &#123;</span><br><span class="line">childIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果父节点小于任何一个孩子的值，直接跳出</span></span><br><span class="line"><span class="keyword">if</span> (temp &lt;= array[childIndex])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 无需真正交换，单向赋值即可</span></span><br><span class="line">array[parentIndex] = array[childIndex];</span><br><span class="line">parentIndex = childIndex;</span><br><span class="line">childIndex = <span class="number">2</span> * childIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">array[parentIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 构建堆</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> *            待调整的堆</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildHeap</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 从最后一个非叶子节点开始，依次下沉调整</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = array.length / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">downAdjust(array, i, array.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">0</span> &#125;;</span><br><span class="line">upAdjust(array);</span><br><span class="line">System.out.println(Arrays.toString(array)); <span class="comment">// [0, 1, 2, 6, 3, 7, 8, 9, 10, 5]</span></span><br><span class="line">array = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">7</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">6</span> &#125;;</span><br><span class="line">buildHeap(array);</span><br><span class="line">System.out.println(Arrays.toString(array)); <span class="comment">// [1, 5, 2, 9, 7, 3, 8, 10, 6]</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中有一个优化的点，就是父节点和孩子节点做连续交换时，并不一定要真的交换，只需要先把交换一方的值存入temp变量，做单向覆盖，循环结束后，再把temp的值存入交换后的最终位置。 </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/e7r5RCp3eQqlz2Auyz6DC6N4PuC1vXxf84*7oltoTSs!/r/dDcBAAAAAAAA" alt=""></p><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><p>让我们回顾一下二叉堆和最大堆的特性：</p><p><strong>1.二叉堆本质上是一种完全二叉树</strong></p><p><strong>2.最大堆的堆顶是整个堆中的最大元素</strong></p><p>当我们删除一个最大堆的堆顶（并不是完全删除，而是替换到最后面），经过自我调节，第二大的元素就会被交换上来，成为最大堆的新堆顶。</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/jLGY2A0iPmMSkLt2*TK349EN2wxP4Z9CQOxziDcQu4E!/r/dDEBAAAAAAAA" alt=""></p><p>正如上图所示，当我们删除值为10的堆顶节点，经过调节，值为9的新节点就会顶替上来；当我们删除值为9的堆顶节点，经过调节，值为8的新节点就会顶替上来…….</p><p>由于二叉堆的这个特性，我们每一次删除旧堆顶，调整后的新堆顶都是大小仅次于旧堆顶的节点。那么我们只要反复删除堆顶，反复调节二叉堆，所得到的集合就成为了一个有序集合，过程如下：</p><p>删除节点9，节点8成为新堆顶：</p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/QAvoaAjQBy4obhe*1xQSs6Kto11qMkHG8y3bQVFjZms!/r/dDYBAAAAAAAA" alt=""></p><p>删除节点8，节点7成为新堆顶： </p><p><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/yl8kQoHM01YIwefBAObIEcHfxzXvF3U6ittLrMZnBog!/r/dEYBAAAAAAAA" alt=""></p><p>删除节点7，节点6成为新堆顶：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/JRjPVSkI95TsE.CD8*VVCbk3zGavgGsWMswyxQYT3mI!/r/dDUBAAAAAAAA" alt=""><br>删除节点6，节点5成为新堆顶：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/h.gFjSctKHZPA6ZkC79GIP2gQl88cLTDIjcSdCjircI!/r/dDYBAAAAAAAA" alt=""><br>删除节点5，节点4成为新堆顶：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/lCsGoEbu*QzECIafWT6.NlmXASm3EhNeX4NxKkF2mLs!/r/dGcBAAAAAAAA" alt=""><br>删除节点4，节点3成为新堆顶：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/495RsjfPb.zPXo2dndGn31lQSFdbdInsxjUNk*6R1JE!/r/dDQBAAAAAAAA" alt=""><br>删除节点3，节点2成为新堆顶：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/D3jKAsqkLdxI9jmhywQ9cVS8z1kyR26DgzSpm7d3B5M!/r/dEgBAAAAAAAA" alt=""><br>到此为止，我们原本的最大堆已经变成了一个从小到大的有序集合。之前说过二叉堆实际存储在数组当中，数组中的元素排列如下：<br><img src="http://r.photo.store.qq.com/psb?/V11NCZYQ4KWZ6n/HsjV9J2G8*GicJDfu6ztv1uS09ThbSbqhhSWArJrfUk!/r/dFIBAAAAAAAA" alt=""><br>由此，我们可以归纳出堆排序算法的步骤：<br><strong>1. 把无序数组构建成二叉堆。</strong><br><strong>2. 循环删除堆顶元素，移到集合尾部，调节堆产生新的堆顶。</strong></p><p>代码在二叉堆操作的基础上稍加改动就行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 下沉调整</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> *            待调整的堆</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentIndex</span></span><br><span class="line"><span class="comment"> *            要下沉的父节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> parentIndex</span></span><br><span class="line"><span class="comment"> *            堆的有效大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">downAdjust</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> parentIndex, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line"><span class="comment">// temp保存父节点值，用于最后的赋值</span></span><br><span class="line"><span class="keyword">int</span> temp = array[parentIndex];</span><br><span class="line"><span class="keyword">int</span> childIndex = <span class="number">2</span> * parentIndex + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (childIndex &lt; length) &#123;</span><br><span class="line"><span class="comment">// 如果有右孩子，且右孩子大于左孩子的值，则定位到右孩子</span></span><br><span class="line"><span class="keyword">if</span> (childIndex + <span class="number">1</span> &lt; length &amp;&amp; array[childIndex + <span class="number">1</span>] &gt; array[childIndex]) &#123;</span><br><span class="line">childIndex++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果父节点小于任何一个孩子的值，直接跳出</span></span><br><span class="line"><span class="keyword">if</span> (temp &gt;= array[childIndex])</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 无需真正交换，单向赋值即可</span></span><br><span class="line">array[parentIndex] = array[childIndex];</span><br><span class="line">parentIndex = childIndex;</span><br><span class="line">childIndex = <span class="number">2</span> * childIndex + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">array[parentIndex] = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 堆排序</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment"> *            待调整的堆</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1.把无序数组构建成二叉堆。</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = (array.length - <span class="number">2</span>) / <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">downAdjust(array, i, array.length);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Arrays.toString(array)); <span class="comment">// [10, 9, 8, 6, 5, 7, 2, 3, 1, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.循环删除堆顶元素，移到集合尾部，调节堆产生新的堆顶。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = array.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="comment">// 最后一个元素和第一元素进行交换</span></span><br><span class="line"><span class="keyword">int</span> temp = array[i];</span><br><span class="line">array[i] = array[<span class="number">0</span>];</span><br><span class="line">array[<span class="number">0</span>] = temp;</span><br><span class="line"><span class="comment">// 下沉调整最大堆</span></span><br><span class="line">downAdjust(array, <span class="number">0</span>, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">0</span> &#125;; <span class="comment">// [0, 1, 2, 3, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line">heapSort(arr);</span><br><span class="line">System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>二叉堆的节点下沉调整（downAdjust 方法）是堆排序算法的基础，这个调节操作本身的时间复杂度是多少呢？</p><p>假设二叉堆总共有n个元素，那么下沉调整的最坏时间复杂度就等同于二叉堆的高度，也就是<strong>O（logn）</strong>。</p><p>我们再来回顾一下堆排序算法的步骤：</p><ol><li>把无序数组构建成二叉堆。</li><li>循环删除堆顶元素，移到集合尾部，调节堆产生新的堆顶。</li></ol><p>第一步，把无序数组构建成二叉堆，需要进行n/2次循环。每次循环调用一次 downAdjust 方法，所以第一步的计算规模是  n/2 * logn，时间复杂度<strong>O（nlogn）</strong>。</p><p>第二步，需要进行n-1次循环。每次循环调用一次 downAdjust 方法，所以第二步的计算规模是 （n-1） * logn ，时间复杂度 <strong>O（nlogn）</strong>。</p><p>两个步骤是并列关系，所以整体的时间复杂度同样是 <strong>O（nlogn）</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>约瑟夫环问题</title>
      <link href="/2018/10/15/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/"/>
      <url>/2018/10/15/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>约瑟夫环问题</p><a id="more"></a><p><strong>问题：</strong><br>    Josephus有过的故事：39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被敌人抓。于是决定了自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀。然后下一个重新报数，直到所有人都自杀身亡为止。然而Josephus 和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，于是逃过了这场死亡游戏。<br>    N个人围成一圈，第一个人从1开始报数，报M的将被杀掉，下一个人接着从1开始报。如此反复，最后剩下一个，求最后的胜利者。 </p><p><strong>思路一：</strong><br>用链表的方法去模拟这个过程，N个人看作是N个链表节点，节点1指向节点2，节点2指向节点3，……，节点N-1指向节点N，节点N指向节点1，这样就形成了一个环。然后从节点1开始1、2、3……往下报数，每报到M，就把那个节点从环上删除。下一个节点接着从1开始报数。最终链表仅剩一个节点。它就是最终的胜利者。<br>缺点：要模拟整个游戏过程，时间复杂度高达O(nm)，当n，m非常大(例如上百万，上千万)的时候，几乎是没有办法在短时间内出结果的。</p><p><strong>思路二：</strong><br>约瑟夫环是一个经典的数学问题，我们不难发现这样的依次报数，似乎有规律可循。为了方便导出递推式，我们重新定义一下题目。<br>问题： N个人编号为1，2，……，N，依次报数，每报到M时，杀掉那个人，求最后胜利者的编号。</p><p>这边我们先把结论抛出了。之后带领大家一步一步的理解这个公式是什么来的。<br>递推公式： </p><blockquote><p>f(N,M)=(f(N−1,M)+M)%N</p></blockquote><p>f(N,M)f(N,M)表示，N个人报数，每报到M时杀掉那个人，最终胜利者的编号<br>f(N−1,M)f(N−1,M)表示，N-1个人报数，每报到M时杀掉那个人，最终胜利者的编号<br>下面我们不用字母表示每一个人，而用数字。 </p><blockquote><p>1、2、3、4、5、6、7、8、9、10、11</p></blockquote><p>表示11个人，他们先排成一排，假设每报到3的人被杀掉。</p><ul><li><p>刚开始时，头一个人编号是1，从他开始报数，第一轮被杀掉的是编号3的人。</p></li><li><p>编号4的人从1开始重新报数，这时候我们可以认为编号4这个人是队伍的头。第二轮被杀掉的是编号6的人。</p></li><li><p>编号7的人开始重新报数，这时候我们可以认为编号7这个人是队伍的头。第三轮被杀掉的是编号9的人。</p></li><li><p>……</p></li><li><p>第九轮时，编号2的人开始重新报数，这时候我们可以认为编号2这个人是队伍的头。这轮被杀掉的是编号8的人。</p></li><li><p>下一个人还是编号为2的人，他从1开始报数，不幸的是他在这轮被杀掉了。</p></li><li><p>最后的胜利者是编号为7的人。</p><blockquote><p>1 2 <strong>3</strong> 4 5 6 7 8</p><p>4 5 <strong>6</strong> 7 8 9 10 11</p><p>7 8 <strong>9</strong> 10 11 1 2 4</p><p>10 11 <strong>1</strong> 2 4 5 7 8</p><p>2 4 <strong>5</strong> 7 8 10 11</p><p>7 8 <strong>10</strong> 11 2 4</p><p>11 2 <strong>4</strong> 7 8</p><p>2 7 <strong>8</strong></p><p><strong>2</strong> 7</p><p><strong>7</strong></p></blockquote></li></ul><p>现在再来看我们递推公式是怎么得到的！<br>将上面表格的每一行看成数组，这个公式描述的是：幸存者在这一轮的下标位置</p><p>f(1,3)：只有1个人了，那个人就是获胜者，他的下标位置是0<br>f(2,3) = (f(1,3)+3)%2 = 3%2 = 1：在有2个人的时候，胜利者的下标位置为1<br>f(3,3) = (f(2,3)+3)%3 = 4%3 = 1：在有3个人的时候，胜利者的下标位置为1<br>f(4,3) = (f(3,3)+3)%4 = 4%4 = 0：在有4个人的时候，胜利者的下标位置为0<br>……<br>f(11,3) = 6<br>很神奇吧！现在你还怀疑这个公式的正确性吗？上面这个例子验证了这个递推公式的确可以计算出胜利者的下标，下面将讲解怎么推导这个公式。</p><p>问题1：假设我们已经知道11个人时，胜利者的下标位置为6。那下一轮10个人时，胜利者的下标位置为多少？<br>答：其实吧，第一轮删掉编号为3的人后，之后的人都往前面移动了3位，胜利这也往前移动了3位，所以他的下标位置由6变成3。</p><p>问题2：假设我们已经知道10个人时，胜利者的下标位置为3。那下一轮11个人时，胜利者的下标位置为多少？<br>答：这可以看错是上一个问题的逆过程，大家都往后移动3位，所以f(11,3) = f(10,3)+3不过有可能数组会越界，所以最后模上当前人数的个数，f(11,3) =（f(10,3)+3%11</p><p>问题3：现在改为人数改为N，报到M时，把那个人杀掉，那么数组是怎么移动的？<br>答：每杀掉一个人，下一个人成为头，相当于把数组向前移动M位。若已知N-1个人时，胜利者的下标位置位f(N−1,M)，则N个人的时候，就是往后移动M为，(因为有可能数组越界，超过的部分会被接到头上，所以还要模N)，既f(N,M)=(f(N−1,M)+M)%N</p><p>注：理解这个递推式的核心在于关注胜利者的下标位置是怎么变的。每杀掉一个人，其实就是把这个数组向前移动了M位。然后逆过来，就可以得到这个递推式。</p><p><strong>因为求出的结果是数组中的下标，最终的编号还要加1</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Josephus</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(solve1(<span class="number">41</span>, <span class="number">3</span>));<span class="comment">// 31</span></span><br><span class="line">System.out.println(solve2(<span class="number">41</span>, <span class="number">3</span>));<span class="comment">// 31</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路一：模拟游戏</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve1</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">List&lt;Integer&gt; peos = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">peos.add(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">// 跳出循环条件</span></span><br><span class="line"><span class="keyword">if</span> (peos.size() == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> peos.get(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当数到队尾时再从头开始数</span></span><br><span class="line"><span class="keyword">if</span> (index == peos.size()) &#123;</span><br><span class="line">index = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每次数到m时这个人被杀</span></span><br><span class="line"><span class="keyword">if</span> (count == m) &#123;</span><br><span class="line">peos.remove(index);</span><br><span class="line">index -= <span class="number">1</span>; <span class="comment">// 这个人被杀后这个index已经指向了下一个人，下标减一再加一就行</span></span><br><span class="line">count = <span class="number">0</span>; <span class="comment">// 计数每次数到m再从1回头数</span></span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//思路二：公式分析    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">solve2</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">p = (p + m) % i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连续子数组的最大和</title>
      <link href="/2018/10/12/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/"/>
      <url>/2018/10/12/%E8%BF%9E%E7%BB%AD%E5%AD%90%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<p> 连续子数组的最大和的问题</p><a id="more"></a><p>剑指Offer31<br>leetcode53</p><p><strong>问题：</strong><br>求一个数组的子数组最大和</p><p>例如输入的数组为{1, -2, 3, 10, -4, 7, 2, -5}，和最大的子数组为｛3, 10, -4, 7, 2}。因此输出为该子数组的和18 。 </p><p><strong>思路：</strong><br>我们试着从头到尾逐个累加示例数组中的每个数字。初始化和为0。第一步加上第一个数字1， 此时和为1。接下来第二步加上数字-2，和就变成了-1。第三步刷上数字3。我们注意到由于此前累计的和是－1 ，小于0，那如果用-1 加上3 ，得到的和是2 ， 比3 本身还小。也就是说从第一个数字开始的子数组的和会小于从第三个数字开始的子数组的和。因此我们不用考虑从第一个数字开始的子数组，之前累计的和也被抛弃。</p><p>我们从第三个数字重新开始累加，此时得到的和是3 。接下来第四步加10，得到和为13 。第五步加上-4， 和为9。我们发现由于-4 是一个负数，因此累加-4 之后得到的和比原来的和还要小。因此我们要把之前得到的和13 保存下来，它有可能是最大的子数组的和。第六步加上数字.7，9 加7 的结果是16，此时和比之前最大的和13 还要大， 把最大的子数组的和由13更新为16。第七步加上2，累加得到的和为18，同时我们也要更新最大子数组的和。第八步加上最后一个数字-5，由于得到的和为13 ，小于此前最大的和18，因此最终最大的子数组的和为18 ，对应的子数组是｛3, 10, -4, 7, 2｝。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span>(nums==<span class="keyword">null</span>||nums.length==<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//记录当前的和</span></span><br><span class="line">        <span class="keyword">int</span> cur=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">// 记录最大的子数组和</span></span><br><span class="line">        <span class="keyword">int</span> res=nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">// 如果当前和小于等于0，就重新设置当前和</span></span><br><span class="line">            cur=cur&lt;<span class="number">0</span>?<span class="number">0</span>:cur;</span><br><span class="line">            <span class="comment">// 如果当前和大于0，累加当前和</span></span><br><span class="line">            cur+=nums[i];</span><br><span class="line">            <span class="comment">// 更新记录到的最大的子数组和</span></span><br><span class="line">            res=Math.max(cur,res);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络基础</title>
      <link href="/2018/09/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/"/>
      <url>/2018/09/25/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<p> 计算机网络常见的面试题</p><a id="more"></a><h3 id="OSI七层体系结构，以及各层功能、协议"><a href="#OSI七层体系结构，以及各层功能、协议" class="headerlink" title="OSI七层体系结构，以及各层功能、协议"></a>OSI七层体系结构，以及各层功能、协议</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">功能</th><th style="text-align:center">协议</th></tr></thead><tbody><tr><td style="text-align:center">物理层</td><td style="text-align:center">利用传输介质为数据链路层提供物理连接，实现比特流的透明传输</td><td style="text-align:center">RJ45、CLOCK、IEEE802.3</td></tr><tr><td style="text-align:center">数据链路层</td><td style="text-align:center">在不可靠的物理线路上进行数据的可靠传递。就是保证传输的可靠性。</td><td style="text-align:center">PPP、FR、HDLC、VLAN、MAC</td></tr><tr><td style="text-align:center">网络层</td><td style="text-align:center">负责数据包从源到宿的传递和网际互连</td><td style="text-align:center">IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP</td></tr><tr><td style="text-align:center">传输层</td><td style="text-align:center">提供端到端的可靠报文传递和错误恢复</td><td style="text-align:center">TCP、UDP、SPX</td></tr><tr><td style="text-align:center">会话层</td><td style="text-align:center">建立、管理和终止会话</td><td style="text-align:center">NFS、SQL、NETBIOS、RPC</td></tr><tr><td style="text-align:center">表示层</td><td style="text-align:center">对数据进行翻译、加密和压缩</td><td style="text-align:center">JPEG、ASCll、DECOIC、加密格式等</td></tr><tr><td style="text-align:center">应用层</td><td style="text-align:center">为用户的应用程序(例如电子邮件、文件传输和终端仿真)提供网络服务</td><td style="text-align:center">HTTP、FTP、TFTP、SMTP、SNMP、DNS、TELNET、HTTPS、POP3、DHCP</td></tr></tbody></table><h3 id="OSI各层对应的设备和数据单元"><a href="#OSI各层对应的设备和数据单元" class="headerlink" title="OSI各层对应的设备和数据单元"></a>OSI各层对应的设备和数据单元</h3><p><strong>应用层</strong>   计算机：应用程序，如FTP，SMTP，HTTP    <u>应用协议数据单元APDU</u><br><strong>表示层</strong>   计算机：编码方式，图像编解码、URL字段传输编码   <u>表示协议数据单元PPDU</u><br><strong>会话层</strong>   计算机：建立会话，SESSION认证、断点续传   <u>会话协议数据单元SPDU</u><br><strong>传输层</strong>   计算机：进程和端口   <u>数据单元叫做段（Segment）</u><br><strong>网络层</strong>   网络：路由器，防火墙、多层交换机   <u>数据单元叫做分组（数据包：Packet）</u><br><strong>数据链路层</strong>   网络：网卡，网桥，交换机   <u>数据单元叫做帧（Frame）</u><br><strong>物理层</strong>   网络：中继器，集线器、网线、HUB    <u>数据单元叫做比特（Bit）</u></p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/7wVSo3Uib2WivQtOsbYHEQTJ2LspOJMlj9DO32JEQ.8!/r/dGYBAAAAAAAA" alt="网络体系结构对比图"></p><h3 id="ARP是地址解析协议，简单语言解释一下工作原理。"><a href="#ARP是地址解析协议，简单语言解释一下工作原理。" class="headerlink" title="ARP是地址解析协议，简单语言解释一下工作原理。"></a>ARP是地址解析协议，简单语言解释一下工作原理。</h3><p>1：首先，每个主机都会在自己的ARP缓冲区中建立一个ARP列表，以表示IP地址和MAC地址之间的对应关系。</p><p>2：当源主机要发送数据时，首先检查ARP列表中是否有对应IP地址的目的主机的MAC地址，如果有，则直接发送数据，如果没有，就向本网段的所有主机发送ARP数据包，该数据包包括的内容有：源主机 IP地址，源主机MAC地址，目的主机的IP 地址。</p><p>3：当本网络的所有主机收到该ARP数据包时，首先检查数据包中的IP地址是否是自己的IP地址，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的IP和MAC地址写入到ARP列表中，如果已经存在，则覆盖，然后将自己的MAC地址写入ARP响应包中，告诉源主机自己是它想要找的MAC地址。</p><p>4：源主机收到ARP响应包后。将目的主机的IP和MAC地址写入ARP列表，并利用此信息发送数据。如果源主机一直没有收到ARP响应数据包，表示ARP查询失败。</p><p>广播发送ARP请求，单播发送ARP响应。</p><h3 id="各种常见协议的介绍"><a href="#各种常见协议的介绍" class="headerlink" title="各种常见协议的介绍"></a>各种常见协议的介绍</h3><p>ICMP协议： 因特网控制报文协议。它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。</p><p>FTP协议： 是TCP/IP协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务。</p><p>HTTP协议： 超文本传输协议，是一个属于应用层的面向对象的协议，由于其简捷、快速的方式，适用于分布式超媒体信息系统。</p><p>NAT协议：网络地址转换属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术，</p><p>DHCP协议：动态主机配置协议，是一种让系统得以连接到网络上，并获取所需要的配置参数手段，使用UDP协议工作。具体用途：给内部网络或网络服务供应商自动分配IP地址，给用户或者内部网络管理员作为对所有计算机作中央管理的手段。</p><h3 id="描述RARP协议"><a href="#描述RARP协议" class="headerlink" title="描述RARP协议"></a>描述RARP协议</h3><p>RARP是逆地址解析协议，作用是完成硬件地址到IP地址的映射，主要用于无盘工作站，因为给无盘工作站配置的IP地址不能保存。工作流程：在网络中配置一台RARP服务器，里面保存着IP地址和MAC地址的映射关系，当无盘工作站启动后，就封装一个RARP数据包，里面有其MAC地址，然后广播到网络上去，当服务器收到请求包后，就查找对应的MAC地址的IP地址装入响应报文中发回给请求者。因为需要广播请求报文，因此RARP只能用于具有广播能力的网络。</p><h3 id="在浏览器中输入www-baidu-com后执行的全部过程"><a href="#在浏览器中输入www-baidu-com后执行的全部过程" class="headerlink" title="在浏览器中输入www.baidu.com后执行的全部过程"></a>在浏览器中输入<a href="http://www.baidu.com后执行的全部过程" target="_blank" rel="noopener">www.baidu.com后执行的全部过程</a></h3><p>(1) 浏览器获取输入的域名<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a><br>(2) 浏览器向DNS请求解析<a href="http://www.baidu.com的IP地址" target="_blank" rel="noopener">www.baidu.com的IP地址</a><br>(3) 域名系统DNS解析出百度服务器的IP地址<br>(4) 浏览器与该服务器建立TCP连接(默认端口号80)<br>(5) 浏览器发出HTTP请求，请求百度首页<br>(6) 服务器通过HTTP响应把首页文件发送给浏览器<br>(7) TCP连接释放<br>(8) 浏览器将首页文件进行解析，并将Web页显示给用户。</p><h3 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h3><p>1.<strong>基于连接vs无连接</strong>。TCP是面向连接的面向字节流协议，而UDP是无连接的面向报文协议。</p><p>2.<strong>可靠性不同</strong>。TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付 。</p><p>3.<strong>有序性</strong>。除了提供交付保证，为TCP也保证了消息的有序性。该消息将以从服务器端发出的同样的顺序发送到客户端，尽管这些消息到网络的另一端时可能是无序的。TCP协议将会为你排好序。UDP不提供任何有序性或序列性的保证。 </p><p>4.<strong>数据边界</strong>。TCP不保存数据的边界，而UDP保证。在传输控制协议，数据以字节流的形式发送，并没有明显的标志表明传输信号消息（段）的边界。在UDP中，数据包单独发送的，只有当他们到达时，才会再次集成。包有明确的界限来哪些包已经收到，这意味着在消息发送后，在接收器接口将会有一个读操作，来生成一个完整的消息。虽然TCP也将在收集所有字节之后生成一个完整的消息，但是这些信息在传给传输给接受端之前将储存在TCP缓冲区，以确保更好的使用网络带宽 。</p><p>5.<strong>速度</strong>。TCP速度比较慢，而UDP速度比较快，因为TCP必须创建连接，以保证消息的可靠交付和有序性，他需要做比UDP多的多的事。这就是为什么UDP更适用于对速度比较敏感的应用，例如：在线视频媒体，电视广播和多人在线游戏。 </p><p>6.<strong>重量级vs轻量级</strong>。由于上述的开销，TCP被认为是重量级的协议，而与之相比，UDP协议则是一个轻量级的协议。因为UDP传输的信息中不承担任何间接创造连接，保证交货或秩序的的信息。这也反映在用于承载元数据的头的大小。</p><p>7.<strong>头大小</strong>。TCP具有比UDP更大的头。一个TCP数据包报头的大小是20字节，UDP数据报报头是8个字节。TCP报头中包含序列号，ACK号，数据偏移量，保留，控制位，窗口，紧急指针，可选项，填充项，校验位，源端口和目的端口。而UDP报头只包含长度，源端口号，目的端口，和校验和。</p><p>8.<strong>拥塞或流控制</strong>。TCP有流量控制。在任何用户数据可以被发送之前，TCP需要三数据包来设置一个套接字连接。TCP处理的可靠性和拥塞控制。另一方面，UDP不能进行流量控制。</p><p>9.<strong>用法和应用</strong>。在互联网中，TCP和UDP都运行在哪些环境中了？在了解了TCP和UDP之间的关键差异之后，我们可以很容易地得出结论，哪种情况适合他们。由于TCP提供可靠交付和有序性的保证，它是最适合需要高可靠并且对传输时间要求不高的应用。UDP是更适合的应用程序需要快速，高效的传输的应用，如游戏。UDP是无状态的性质，在服务器端需要对大量客户端产生的少量请求进行应答的应用中是非常有用的。在实践中，TCP被用于金融领域，如FIX协议是一种基于TCP的协议，而UDP是大量使用在游戏和娱乐场所。</p><p><strong>TCP对应的协议：</strong><br>（1） FTP：定义了文件传输协议，使用21端口。<br>（2） Telnet：一种用于远程登陆的端口，使用23端口，用户可以以自己的身份远程连接到计算机上，可提供基于DOS模式下的通信服务。<br>（3） SMTP：邮件传送协议，用于发送邮件。服务器开放的是25号端口。<br>（4） POP3：它是和SMTP对应，POP3用于接收邮件。POP3协议所用的是110端口。<br>（5）HTTP：是从Web服务器传输超文本到本地浏览器的传送协议。</p><p><strong>UDP对应的协议：</strong><br>（1） DNS：用于域名解析服务，将域名地址转换为IP地址。DNS用的是53号端口。<br>（2） SNMP：简单网络管理协议，使用161号端口，是用来管理网络设备的。由于网络设备很多，无连接的服务就体现出其优势。<br>（3） TFTP(Trival File Transfer Protocal)，简单文件传输协议，该协议在熟知端口69上使用UDP服务。</p><h3 id="流量控制与拥塞控制"><a href="#流量控制与拥塞控制" class="headerlink" title="流量控制与拥塞控制"></a>流量控制与拥塞控制</h3><p>流量控制：A与B连接建立后，B根据自己接收缓存的大小确定窗口值大小，然后告知A，A发送的数据不大于该窗口值，往往是点对点之间的通信量控制</p><p>拥塞控制：是防止过多的数据注入网络中，根据整个网络的负载进行调整。</p><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p>第一次握手<br>client 发送一个<strong>SYN(J)包</strong>给 server，然后等待 server 的 ACK 回复，进入<code>SYN-SENT</code>状态。p.s: SYN 为 synchronize 的缩写，ACK 为 acknowledgment 的缩写。</p><p>第二次握手<br>server 接收到 SYN(seq=J)包后就返回一个<strong>ACK(J+1)包</strong>以及一个自己的<strong>SYN(K)</strong>包，然后等待 client 的 ACK 回复，server 进入<code>SYN-RECIVED</code>状态。</p><p>第三次握手<br>client 接收到 server 发回的 ACK(J+1)包后，进入<code>ESTABLISHED</code>状态。然后根据 server 发来的 SYN(K)包，返回给等待中的 server 一个<strong>ACK(K+1)包</strong>。等待中的 server 收到 ACK 回复，也把自己的状态设置为<code>ESTABLISHED</code>。到此 TCP 三次握手完成，client 与 server 可以正常进行通信了。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/GcagdHNSA9gbuCnxISbn0oWTEF8nMJrvs7gKwJ0RW0M!/r/dDUBAAAAAAAA" alt="三次握手"></p><h3 id="为什么要进行三次握手"><a href="#为什么要进行三次握手" class="headerlink" title="为什么要进行三次握手"></a>为什么要进行三次握手</h3><p>我们来看一下为什么需要进行三次握手，两次握手难道不行么？这里我们用一个生活中的具体例子来解释就很好理解了。我们可以将三次握手中的客户端和服务器之间的握手过程比喻成 A 和 B 通信的过程：</p><ul><li>在第一次通信过程中，A 向 B 发送信息之后，B 收到信息后可以确认自己的收信能力和 A 的发信能力没有问题。</li><li>在第二次通信中，B 向 A 发送信息之后，A 可以确认自己的发信能力和 B 的收信能力没有问题，但是 B 不知道自己的发信能力到底如何，所以就需要第三次通信。</li><li>在第三次通信中，A 向 B 发送信息之后，B 就可以确认自己的发信能力没有问题。</li></ul><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这个原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。<br>（1）客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送（报文段4）。<br>（2）服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1（报文段5）。和SYN一样，一个FIN将占用一个序号。<br>（3）服务器B关闭与客户端A的连接，发送一个FIN给客户端A（报文段6）。<br>（4）客户端A发回ACK报文确认，并将确认序号设置为收到序号加1（报文段7）</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/HWqre6jfg5NhO7cJ.AkHmxoLaLV4breIqmjZMoKk.SQ!/r/dDYBAAAAAAAA" alt="四次挥手"></p><h3 id="TCP采用四次挥手关闭连接如图所示为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？"><a href="#TCP采用四次挥手关闭连接如图所示为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？" class="headerlink" title="TCP采用四次挥手关闭连接如图所示为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？"></a>TCP采用四次挥手关闭连接如图所示为什么建立连接协议是三次握手，而关闭连接却是四次握手呢？</h3><p>这是因为服务端的LISTEN状态下的SOCKET当收到SYN报文的建连请求后，它可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送。但关闭连接时，当收到对方的FIN报文通知时，它仅仅表示对方没有数据发送给你了；但未必你所有的数据都全部发送给对方了，所以你可以未必会马上会关闭SOCKET,也即你可能还需要发送一些数据给对方之后，再发送FIN报文给对方来表示你同意现在可以关闭连接了，所以它这里的ACK报文和FIN报文多数情况下都是分开发送的。</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合框架小结</title>
      <link href="/2018/09/22/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B0%8F%E7%BB%93/"/>
      <url>/2018/09/22/Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Java集合框架小结</p><a id="more"></a><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/Zok**qYH9ruKdeJvc7MbFVvwm4wYpnvArjdbQo9aT0I!/r/dEYBAAAAAAAA" alt="Java集合框架图"></p><h3 id="Vector、ArrayList和LinkedList的比较"><a href="#Vector、ArrayList和LinkedList的比较" class="headerlink" title="Vector、ArrayList和LinkedList的比较"></a>Vector、ArrayList和LinkedList的比较</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Vector</th><th style="text-align:center">ArrayList</th><th style="text-align:center">LinkedList</th></tr></thead><tbody><tr><td style="text-align:center">底层结构</td><td style="text-align:center">数组</td><td style="text-align:center">数组</td><td style="text-align:center">双向链表</td></tr><tr><td style="text-align:center">插/查速度</td><td style="text-align:center">查询快，插入慢</td><td style="text-align:center">查询快，插入慢</td><td style="text-align:center">查询慢，插入快</td></tr><tr><td style="text-align:center">初始化默认容量</td><td style="text-align:center">10（每次扩容一倍）</td><td style="text-align:center">10（每次扩容1.5倍）</td><td style="text-align:center">——</td></tr><tr><td style="text-align:center">是否线程安全</td><td style="text-align:center">是</td><td style="text-align:center">否</td><td style="text-align:center">否</td></tr></tbody></table><p><code>ArrayList</code>：线程不同步。默认初始容量为 10，当数组大小不足时容量扩大为 1.5 倍。为追求效率，ArrayList 没有实现同步（synchronized），如果需要多个线程并发访问，用户可以手动同步，也可使用 Vector 替代。 (注意：List<string> list = new ArrayList<string>(20);这条语句list不会扩容，直接创建了一个20容量的list )<br><strong>删除元素</strong>：需要调用 System.arraycopy() 将 index+1 后面的元素都复制到 index 位置上。<br><strong>扩容：</strong>添加元素时使用 ensureCapacityInternal() 方法来保证容量足够，如果不够时，需要使用 grow() 方法进行扩容，新容量的大小为 <code>oldCapacity + (oldCapacity &gt;&gt; 1)</code>，也就是旧容量的 1.5 倍。扩容操作需要调用 <code>Arrays.copyOf()</code> 把原数组整个复制到新数组中，这个操作代价很高，因此最好在创建 ArrayList 对象时就指定大概的容量大小，减少扩容操作的次数。</string></string></p><p><code>LinkedList</code>：线程不同步。<strong>双向链接实现</strong>。LinkedList 同时实现了 List 接口和 Deque 接口，也就是说它既可以看作一个顺序容器，又可以看作一个队列（Queue），同时又可以看作一个栈（Stack）。这样看来，LinkedList 简直就是个全能冠军。当你需要使用栈或者队列时，可以考虑使用 LinkedList，一方面是因为 Java 官方已经声明不建议使用 Stack 类，更遗憾的是，Java 里根本没有一个叫做 Queue 的类（它是个接口名字）。关于栈或队列，现在的首选是 ArrayDeque，它有着比 LinkedList（当作栈或队列使用时）有着更好的性能。 </p><h4 id="ArrayList-与-LinkedList"><a href="#ArrayList-与-LinkedList" class="headerlink" title="ArrayList 与 LinkedList"></a>ArrayList 与 LinkedList</h4><ul><li>ArrayList 基于动态数组实现，LinkedList 基于双向链表实现；</li><li>ArrayList 支持随机访问，LinkedList 不支持；</li><li><p>LinkedList 在任意位置添加删除元素更快。</p><p><code>Stack and Queue</code>：Java 里有一个叫做 Stack 的类，却没有叫做 Queue 的类（它是个接口名字）。当需要使用栈时，Java 已不推荐使用 Stack，而是推荐使用更高效的 ArrayDeque；既然 Queue 只是一个接口，当需要使用队列时也就首选 ArrayDeque 了（次选是 LinkedList ）。 </p></li></ul><p><code>Vector</code>：<strong>线程同步</strong>。默认初始容量为 10，当数组大小不足时容量扩大为 2 倍。它的同步是通过 <code>Iterator</code> 方法加 <code>synchronized</code> 实现的。</p><h4 id="synchronizedList封装ArrayList（LinkedList）得到线程安全的List"><a href="#synchronizedList封装ArrayList（LinkedList）得到线程安全的List" class="headerlink" title="synchronizedList封装ArrayList（LinkedList）得到线程安全的List"></a>synchronizedList封装ArrayList（LinkedList）得到线程安全的List</h4><p>为了获得线程安全的 ArrayList，可以使用  <code>Collections.synchronizedList();</code>  得到一个线程安全的  ArrayList。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;String&gt; synList = Collections.synchronizedList(list);</span><br></pre></td></tr></table></figure></p><p> <code>Stack</code>：<strong>线程同步</strong>。继承自 Vector，添加了几个方法来完成栈的功能。现在已经不推荐使用 Stack，在栈和队列中有限使用 ArrayDeque，其次是 LinkedList。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/daAryZn4OBx.tezR2DldFP7oBvXLNe8o*c.49gG*H48!/r/dDEBAAAAAAAA" alt="集合机构图"></p><h3 id="HashMap浅析"><a href="#HashMap浅析" class="headerlink" title="HashMap浅析"></a><strong>HashMap浅析</strong></h3><h4 id="数据存储结构"><a href="#数据存储结构" class="headerlink" title="数据存储结构"></a>数据存储结构</h4><p>在 1.7 之前 JDK 采用「拉链法」来存储数据，即数组和链表结合的方式。<br>「拉链法」用专业点的名词来说叫做<strong>链地址法</strong>。简单来说，就是数组加链表的结合。在每个数组元素上存储的都是一个链表。<br>我们之前说到不同的 key 可能经过 hash 运算可能会得到相同的地址，但是一个数组单位上只能存放一个元素，采用链地址法以后，如果遇到相同的 hash 值的 key 的时候，我们可以将它放到作为数组元素的链表上。待我们去取元素的时候通过 hash 运算的结果找到这个链表，再在链表中找到与 key 相同的节点，就能找到 key 相应的值了。<br>JDK1.7 中新添加进来的元素总是放在数组相应的角标位置，而原来处于该角标的位置的节点作为 next 节点放到新节点的后边。<img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/pYoXA.4eoJeFW*hdgi24opN2fdEWeqN0zaqlCLLMKrk!/r/dFMBAAAAAAAA" alt="HashMap存储结构"></p><p>JDK1.8 之后的 <code>HashMap</code> 底层在解决哈希冲突的时候，就不单单是使用数组加上单链表的组合了，因为当处理如果 hash 值冲突较多的情况下，链表的长度就会越来越长，此时通过单链表来寻找对应 Key 对应的 Value 的时候就会使得时间复杂度达到 O(n)，因此在 JDK1.8 之后，在链表新增节点导致链表长度超过 <code>TREEIFY_THRESHOLD = 8</code>  的时候，就会在添加元素的同时将原来的单链表转化为红黑树。<br>黑树是一种易于增删改查的二叉树，他对与数据的查询的时间复杂度是 <code>O(logn)</code> 级别，所以利用红黑树的特点就可以更高效的对 <code>HashMap</code> 中的元素进行操作。</p><p><strong>这里需要讲明白两个问题：数据底层具体存储的是什么？这样的存储方式有什么优点呢？</strong> </p><p>（1）从源码可知，HashMap 类中有一个非常重要的字段，就是 Node[] table，即哈希桶数组，明显它是一个 Node 的数组。我们来看 Node（ JDK1.8 中） 是何物。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;    <span class="comment">//用来定位数组索引位置</span></span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Node&lt;K,V&gt; next;   <span class="comment">//链表的下一个node</span></span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">getValue</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> V <span class="title">setValue</span><span class="params">(V newValue)</span> </span>&#123; ... &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node 是 HashMap 的一个内部类，实现了 Map.Entry 接口，本质是就是一个映射（键值对）。上图中的每个黑色圆点就是一个Node对象。</p><p>（2）HashMap 就是使用哈希表来存储的。哈希表为解决冲突，可以采用<strong>开放地址法</strong>和<strong>链地址法</strong>等来解决问题， Java 中 HashMap 采用了链地址法。链地址法，简单来说，就是数组加链表的结合。在每个数组元素上都一个链表结构，当数据被 Hash 后，得到数组下标，把数据放在对应下标元素的链表上。例如程序执行下面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.put(<span class="string">"美团"</span>,<span class="string">"小美"</span>);</span><br></pre></td></tr></table></figure><p>系统将调用 “美团” 这个 key 的 hashCode() 方法得到其 hashCode 值（该方法适用于每个 Java 对象），然后再通过 Hash 算法的后两步运算（高位运算和取模运算，下文有介绍）来定位该键值对的存储位置，有时两个 key 会定位到相同的位置，表示发生了 Hash 碰撞。当然 Hash 算法计算结果越分散均匀，Hash 碰撞的概率就越小，map 的存取效率就会越高。</p><p>如果哈希桶数组很大，即使较差的 Hash 算法也会比较分散，如果哈希桶数组数组很小，即使好的 Hash 算法也会出现较多碰撞，所以就需要在空间成本和时间成本之间权衡，其实就是在根据实际情况确定哈希桶数组的大小，并在此基础上设计好的 hash 算法减少 Hash 碰撞。</p><p><strong>那么通过什么方式来控制 map 使得 Hash 碰撞的概率又小，哈希桶数组（Node[] table）占用空间又少呢？</strong></p><p>答案就是好的 Hash 算法和扩容机制。</p><p>在理解 Hash 和扩容流程之前，我们得先了解下 HashMap 的几个字段。从 HashMap 的默认构造函数源码可知，构造函数就是对下面几个字段进行初始化，源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> threshold;             <span class="comment">// 所能容纳的key-value对极限 </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    <span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">int</span> modCount;  </span><br><span class="line"><span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><p>首先，<strong>Node[] table的初始化长度 length (默认值是16)</strong>，<strong>Load factor 为负载因子(默认值是0.75)</strong>，threshold 是 HashMap 所能容纳的最大数据量的 Node (键值对)个数。<strong>threshold = length * Load factor</strong>。也就是说，在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p><p>结合负载因子的定义公式可知，threshold 就是在此 Load factor 和 length (数组长度)对应下允许的最大元素数目，超过这个数目就重新 resize(扩容)，扩容后的 HashMap 容量是之前容量的两倍。默认的负载因子 0.75 是对空间和时间效率的一个平衡选择，建议大家不要修改，除非在时间和空间比较特殊的情况下，如果内存空间很多而又对时间效率要求很高，可以降低负载因子 Load factor 的值；相反，如果内存空间紧张而对时间效率要求不高，可以增加负载因子 loadFactor 的值，这个值可以大于1。</p><p>size 这个字段其实很好理解，就是 HashMap 中实际存在的键值对数量。注意和 table 的长度 length、容纳最大键值对数量 threshold 的区别。而 modCount 字段主要用来记录 HashMap 内部结构发生变化的次数，主要用于迭代的快速失败。强调一点，内部结构发生变化指的是结构发生变化，例如 put 新键值对，但是某个 key 对应的 value 值被覆盖不属于结构变化。</p><p>在 HashMap 中，哈希桶数组 table 的长度 length 大小必须为$2^n$（一定是合数），这是一种非常规的设计，常规的设计是把桶的大小设计为素数。相对来说素数导致冲突的概率要小于合数，具体证明可以参考 <a href="https://blog.csdn.net/liuqiyao_01/article/details/14475159" target="_blank" rel="noopener">为什么一般hashtable的桶数会取一个素数？</a> ，<strong>Hashtable 初始化桶大小为 11，就是桶大小设计为素数的应用（Hashtable 扩容后不能保证还是素数）</strong>。HashMap 采用这种非常规设计，<strong>主要是为了在取模和扩容时做优化，同时为了减少冲突，HashMap 定位哈希桶索引位置时，也加入了高位参与运算的过程</strong>。</p><p>这里存在一个问题，即使负载因子和 Hash 算法设计的再合理，也免不了会出现拉链过长的情况，一旦出现拉链过长，则会严重影响 HashMap 的性能。于是，在 JDK1.8 版本中，对数据结构做了进一步的优化，引入了红黑树。而当链表长度太长（默认超过8）时，链表就转换为红黑树，利用红黑树快速增删改查的特点提高 HashMap 的性能，其中会用到红黑树的插入、删除、查找等算法。本文不再对红黑树展开讨论，想了解更多红黑树数据结构的工作原理可以参考：<a href="https://blog.csdn.net/v_july_v/article/details/6105630" target="_blank" rel="noopener">教你初步了解红黑树</a>。</p><h4 id="重要参数"><a href="#重要参数" class="headerlink" title="重要参数"></a>重要参数</h4><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">buckets</td><td style="text-align:center">在 HashMap 的注释里使用哈希桶来形象的表示数组中每个地址位置。注意这里并不是数组本身，数组是装哈希桶的，他可以被称为<strong>哈希表</strong>。</td></tr><tr><td style="text-align:center">capacity</td><td style="text-align:center">table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。</td></tr><tr><td style="text-align:center">size</td><td style="text-align:center">table 的实际使用量。</td></tr><tr><td style="text-align:center">threshold</td><td style="text-align:center">size 的临界值，size 必须小于 threshold，如果大于等于，就必须进行扩容操作。</td></tr><tr><td style="text-align:center">loadFactor</td><td style="text-align:center">装载因子，table 能够使用的比例，threshold = capacity * loadFactor。</td></tr><tr><td style="text-align:center">TREEIFY_THRESHOLD</td><td style="text-align:center">树化阀值，哈希桶中的节点个数大于该值（默认为8）的时候将会被转为红黑树行存储结构。</td></tr><tr><td style="text-align:center">UNTREEIFY_THRESHOLD</td><td style="text-align:center">非树化阀值，小于该值（默认为 6）的时候将再次改为单链表的格式存储</td></tr></tbody></table><h4 id="HashMap的put方法"><a href="#HashMap的put方法" class="headerlink" title="HashMap的put方法"></a>HashMap的put方法</h4><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/OOReCP4mZlZFnQ.jd0EtCUsFnUe9WCSNplenB*5WLjU!/r/dFMBAAAAAAAA" alt="HashMap的put方法"></p><h4 id="HashMap与HashTable"><a href="#HashMap与HashTable" class="headerlink" title="HashMap与HashTable"></a>HashMap与HashTable</h4><ol><li>HashTable 使用 synchronized 来进行同步。</li><li>HashMap 可以插入键为 null 的 Entry。</li><li>HashMap 的迭代器是 fail-fast 迭代器。</li><li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li></ol><h4 id="什么是-fail-fast-机制"><a href="#什么是-fail-fast-机制" class="headerlink" title="什么是 fail-fast 机制?"></a>什么是 fail-fast 机制?</h4><p>fail-fast 机制在遍历一个集合时，当集合结构被修改，会抛出 Concurrent Modification Exception。</p><p>fail-fast 会在以下两种情况下抛出 Concurrent Modification Exception</p><p>（1）单线程环境</p><ul><li>集合被创建后，在遍历它的过程中修改了结构。</li><li>注意 remove() 方法会让 expectModcount 和 modcount 相等，所以是不会抛出这个异常。</li></ul><p>（2）多线程环境</p><ul><li>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</li></ul><p>modCount 用来记录 ArrayList 结构发生变化的次数。结构发生变化是指<strong>添加</strong>或者<strong>删除</strong>至少一个元素的所有操作，或者是调整内部数组的大小，仅仅只是设置元素的值不算结构发生变化。</p><p>在进行序列化或者迭代等操作时，需要比较操作前后 modCount 是否改变，如果改变了需要抛出 Concurrent Modification Exception。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeObject</span><span class="params">(java.io.ObjectOutputStream s)</span> <span class="keyword">throws</span> java.io.IOException</span>&#123;</span><br><span class="line">    <span class="comment">// Write out element count, and any hidden stuff</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;</span><br><span class="line">    s.defaultWriteObject();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out size as capacity for behavioural compatibility with clone()</span></span><br><span class="line">    s.writeInt(size);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Write out all elements in the proper order.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size; i++) &#123;</span><br><span class="line">        s.writeObject(elementData[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (modCount != expectedModCount) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>扩容是一个特别耗性能的操作，所以当程序员在使用 HashMap 的时候，估算 map 的大小，初始化的时候给一个大致的数值，避免 map 进行频繁的扩容。</li><li>负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。</li><li>HashMap 是线程不安全的，不要在并发的环境中同时操作 HashMap，建议使用 ConcurrentHashMap。</li><li>JDK1.8 引入红黑树大程度优化了 HashMap 的性能。</li></ol><h3 id="ConcurrentHashMap浅析"><a href="#ConcurrentHashMap浅析" class="headerlink" title="ConcurrentHashMap浅析"></a>ConcurrentHashMap浅析</h3><p>哈希表是中非常高效，复杂度为 O(1) 的数据结构，在 Java 开发中，我们最常见到最频繁使用的就是 HashMap 和 HashTable，但是在线程竞争激烈的并发场景中使用都不够合理。</p><p>　　<strong>HashMap</strong> ：先说 HashMap，HashMap 是<strong>线程不安全</strong>的，在并发环境下，可能会形成<strong>环状链表</strong>（扩容时可能造成），导致 get 操作时，cpu 空转，所以，在并发环境中使 用HashMap 是非常危险的。</p><p>　　<strong>HashTable</strong> ： HashTable 和 HashMap的实现原理几乎一样，差别无非是：（1）HashTable不允许key和value为null；（2）HashTable是线程安全的。</p><p>　　但是 HashTable 线程安全的策略实现代价却太大了，简单粗暴，get/put 所有相关操作都是 synchronized 的，这相当于给整个哈希表加了一把大锁，多线程访问时候，只要有一个线程访问或操作该对象，那其他线程只能阻塞，相当于将所有的操作串行化，在竞争激烈的并发场景中性能就会非常差。</p><p>HashTable 性能差主要是由于所有操作需要竞争同一把锁，而如果容器中有多把锁，每一把锁锁一段数据，这样在多线程访问时不同段的数据时，就不会存在锁竞争了，这样便可以有效地提高并发效率。这就是ConcurrentHashMap 所采用的 “<strong>分段锁</strong>“ 思想。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/q1If0xezU6uoj1mCzGxHPWZ3eL2xp.jbiLDWJWxuuwA!/r/dDQBAAAAAAAA" alt="ConcurrentHashMap分段锁思想"></p><h4 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h4><p>ConcurrentHashMap 采用了非常精妙的”分段锁”策略，ConcurrentHashMap 的主干是个 Segment 数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure><p>　　Segment 继承了 ReentrantLock，所以它就是一种可重入锁（ReentrantLock)。在 ConcurrentHashMap，一个 Segment 就是一个子哈希表，Segment 里维护了一个 HashEntry 数组，并发环境下，对于不同 Segment 的数据进行操作是不用考虑锁竞争的。（就按默认的 ConcurrentLeve 为16来讲，理论上就允许 16 个线程并发执行，有木有很酷）</p><p>　　<strong>所以，对于同一个 Segment 的操作才需考虑线程同步，不同的 Segment 则无需考虑。</strong></p><p>Segment 类似于 HashMap，一个 Segment 维护着一个 HashEntry 数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p>HashEntry 是目前我们提到的最小的逻辑处理单元了。一个 ConcurrentHashMap 维护一个 Segment 数组，一个 Segment 维护一个 HashEntry 数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　ConcurrentHashMap 和 HashMap 实现上类似，最主要的差别是 ConcurrentHashMap 采用了分段锁（Segment），每个分段锁维护着几个桶（HashEntry），多个线程可以同时访问不同分段锁上的桶，从而使其并发度更高（并发度就是 Segment 的个数）。</p><p>Segment 继承自 <strong>ReentrantLock</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure><p>默认的并发级别为 16，也就是说默认创建 16 个 Segment。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br></pre></td></tr></table></figure><h4 id="size-操作"><a href="#size-操作" class="headerlink" title="size 操作"></a>size 操作</h4><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of elements. Accessed only either within locks</span></span><br><span class="line"><span class="comment"> * or among other volatile reads that maintain visibility.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br></pre></td></tr></table></figure><p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p><p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p><p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p><p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。</p><h4 id="同步方式"><a href="#同步方式" class="headerlink" title="同步方式"></a>同步方式</h4><p>Segment 继承自 ReentrantLock，所以我们可以很方便的对每一个 Segment 上锁。</p><p>对于读操作，获取 Key 所在的 Segment 时，需要保证可见性。具体实现上可以使用 volatile 关键字，也可使用锁。但使用锁开销太大，而使用 volatile 时每次写操作都会让所有 CPU 内缓存无效，也有一定开销。ConcurrentHashMap 使用如下方法保证可见性，取得最新的 Segment。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Segment&lt;K,V&gt; s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)</span><br></pre></td></tr></table></figure><p>获取 Segment 中的 HashEntry 时也使用了类似方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">  (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE)</span><br></pre></td></tr></table></figure><p>对于写操作，并不要求同时获取所有 Segment 的锁，因为那样相当于锁住了整个 Map。它会先获取该 Key-Value 对所在的 Segment 的锁，获取成功后就可以像操作一个普通的 HashMap 一样操作该 Segment，并保证该Segment 的安全性。<br>同时由于其它 Segment 的锁并未被获取，因此理论上可支持 concurrencyLevel（等于 Segment 的个数）个线程安全的并发读写。</p><p>获取锁时，并不直接使用 lock 来获取，因为该方法获取锁失败时会挂起。事实上，它使用了自旋锁，如果 tryLock 获取锁失败，说明锁被其它线程占用，此时通过循环再次以 tryLock 的方式申请锁。如果在循环过程中该 Key 所对应的链表头被修改，则重置 retry 次数。如果 retry 次数超过一定值，则使用 lock 方法申请锁。</p><p>这里使用自旋锁是因为自旋锁的效率比较高，但是它消耗 CPU 资源比较多，因此在自旋次数超过阈值时切换为互斥锁。</p><h4 id="JDK-1-8-的改动"><a href="#JDK-1-8-的改动" class="headerlink" title="JDK 1.8 的改动"></a>JDK 1.8 的改动</h4><ul><li>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发程度与 Segment 数量相等。</li><li>JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</li><li>并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。</li></ul><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>　　前面已经说过 HashSet 是对 HashMap 的简单包装，对 HashSet 的函数调用都会转换成合适的 HashMap 方法，因此 HashSet 的实现非常简单，只有不到 300 行代码（适配器模式）。这里不再赘述。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//HashSet是对HashMap的简单包装</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">......</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;<span class="comment">//HashSet里面有一个HashMap</span></span><br><span class="line">    <span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;<span class="comment">//简单的方法转换</span></span><br><span class="line">        <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h4><p>首先了解下 <code>HashSet</code> 的成员变量:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Dummy value to associate with an Object in the backing Map</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><p>发现主要就两个变量:</p><ul><li><code>map</code> ：用于存放最终数据的。</li><li><code>PRESENT</code> ：是所有写入 map 的 <code>value</code> 值。</li></ul><h4 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数很简单，利用了 <code>HashMap</code> 初始化了 <code>map</code> 。</p><h4 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较关键的就是这个 <code>add()</code> 方法。 可以看出它是将存放的对象当做了 <code>HashMap</code> 的健，<code>value</code> 都是相同的 <code>PRESENT</code> 。由于 <code>HashMap</code> 的 <code>key</code> 是不能重复的，所以每当有重复的值写入到 <code>HashSet</code> 时，<code>value</code> 会被覆盖，但 <code>key</code> 不会收到影响，这样就保证了 <code>HashSet</code> 中只能存放不重复的元素。</p><h3 id="LinkedHashMap经典用法"><a href="#LinkedHashMap经典用法" class="headerlink" title="LinkedHashMap经典用法"></a>LinkedHashMap经典用法</h3><p>LinkedHashMap 除了可以保证迭代顺序外，还有一个非常有用的用法：可以轻松实现一个采用了FIFO替换策略的缓存。具体说来，LinkedHashMap 有一个子类方法 <code>protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest)</code>，该方法的作用是告诉 Map 是否要删除“最老”的 Entry，所谓最老就是当前 Map 中最早插入的 Entry，如果该方法返回 true，最老的那个元素就会被删除。在每次插入新元素的之后 LinkedHashMap 会自动询问 removeEldestEntry() 是否要删除最老的元素。这样只需要在子类中重载该方法，当元素个数超过一定数量时让 removeEldestEntry() 返回 true，就能够实现一个固定大小的 FIFO 策略的缓存。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 一个固定大小的FIFO替换策略的缓存 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FIFOCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> cacheSize;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FIFOCache</span><span class="params">(<span class="keyword">int</span> cacheSize)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cacheSize = cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当Entry个数超过cacheSize时，删除最老的Entry</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> size() &gt; cacheSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="容器中的设计模式"><a href="#容器中的设计模式" class="headerlink" title="容器中的设计模式"></a>容器中的设计模式</h3><h4 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h4><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/t4Zntx2MjRsXdqDaiF3x9Y*DX.1.4okbpt5nS7EL3tA!/r/dDIBAAAAAAAA" alt="迭代器模式"></p><p>Collection 实现了 Iterable 接口，其中的 iterator() 方法能够产生一个 Iterator 对象，通过这个对象就可以迭代遍历 Collection 中的元素。</p><p>从 JDK 1.5 之后可以使用 foreach 方法来遍历实现了 Iterable 接口的聚合对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add(<span class="string">"a"</span>);</span><br><span class="line">list.add(<span class="string">"b"</span>);</span><br><span class="line"><span class="keyword">for</span> (String item : list) &#123;</span><br><span class="line">    System.out.println(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h4><p>java.util.Arrays.asList() 可以把数组类型转换为 List 类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span></span></span><br></pre></td></tr></table></figure><p>如果要将数组类型转换为 List 类型，应该注意的是 asList() 的参数为泛型的变长参数，因此不能使用基本类型数组作为参数，只能使用相应的包装类型数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">List list = Arrays.asList(arr);</span><br></pre></td></tr></table></figure><p>也可以使用以下方式生成 List。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure><h3 id="面试指南"><a href="#面试指南" class="headerlink" title="面试指南"></a>面试指南</h3><h4 id="1-ArrayList和LinkedList区别"><a href="#1-ArrayList和LinkedList区别" class="headerlink" title="1. ArrayList和LinkedList区别"></a>1. ArrayList和LinkedList区别</h4><ul><li>ArrayList 和 LinkedList 可想从名字分析，它们一个是 Array (动态数组) 的数据结构，一个是 Link (链表) 的数据结构，此外，它们两个都是对 List 接口的实现。前者是数组队列，相当于动态数组；后者为双向链表结构，也可当作堆栈、队列、双端队列；</li><li><strong>当随机访问 List 时</strong>（get和set操作），ArrayList 比 LinkedList的效率更高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找；</li><li><strong>当对数据进行增加和删除的操作时</strong>（add 和 remove 操作），LinkedList 比 ArrayList 的效率更高，因为 ArrayList 是数组，所以在其中进行增删操作时，会对操作点之后所有数据的下标索引造成影响，需要进行数据的移动；</li><li><strong>从利用效率来看</strong>，ArrayList 自由性较低，因为它需要手动的设置固定大小的容量，但是它的使用比较方便，只需要创建，然后添加数据，通过调用下标进行使用；而 LinkedList 自由性较高，能够动态的随数据量的变化而变化，但是它不便于使用；</li><li>ArrayList 主要空间开销在于需要在 List 列表预留一定空间；而 LinkList 主要控件开销在于需要存储结点信息以及结点指针信息。</li></ul><ul><li><strong>ArrayList、LinkedList 和 Vector如何选择？</strong><ul><li>当对数据的主要操作为索引或只在集合的末端增加、删除元素时，使用 ArrayList 或 Vector 效率比较高；</li><li>当对数据的操作主要为制定位置的插入或删除操作时，使用 LinkedList 效率比较高；</li><li>当在多线程中使用容器时（即多个线程会同时访问该容器），选用 Vector 较为安全；</li></ul></li></ul><h4 id="2-HashMap和HashTable区别，HashMap的key类型"><a href="#2-HashMap和HashTable区别，HashMap的key类型" class="headerlink" title="2. HashMap和HashTable区别，HashMap的key类型"></a>2. HashMap和HashTable区别，HashMap的key类型</h4><ul><li><p><strong>Hash Map和HashTable的区别</strong>  </p><ul><li>Hashtable 的方法是同步的，HashMap 非同步，所以在多线程场合要手动同步</li><li>Hashtable 不允许 null 值 (key 和 value 都不可以)，HashMap 允许 null 值( key 和 value 都可以)。 </li><li><p>两者的遍历方式大同小异，Hashtable 仅仅比 HashMap 多一个 elements 方法。 </p></li><li><p>Hashtable 和 HashMap 都能通过 values() 方法返回一个 Collection ，然后进行遍历处理。 </p></li><li><p>两者也都可以通过 entrySet() 方法返回一个 Set ， 然后进行遍历处理。 </p></li><li><p>HashTable 使用 Enumeration，HashMap 使用 Iterator。 </p></li><li>哈希值的使用不同，Hashtable 直接使用对象的 hashCode。而 HashMap 重新计算hash值，而且用于代替求模。 </li><li>Hashtable 中 hash 数组默认大小是11，增加的方式是 old*2+1。HashMap 中 hash 数组的默认大小是16，而且一定是 2 的指数。 </li><li>HashTable 基于 Dictionary 类，而 HashMap 基于 AbstractMap 类 </li></ul></li><li><p><strong>HashMap中的key可以是任何对象或数据类型吗</strong> </p><ul><li>可以为null，但不能是可变对象，如果是可变对象的话，对象中的属性改变，则对象 HashCode 也进行相应的改变，导致下次无法查找到已存在Map中的数据。 </li><li>如果可变对象在 HashMap 中被用作键，那就要小心在改变对象状态的时候，不要改变它的哈希值了。我们只需要保证成员变量的改变能保证该对象的哈希值不变即可。 </li></ul></li><li><p><strong>HashTable是线程安全的么</strong> </p><ul><li>HashTable 是线程安全的，其实现是在对应的方法上添加了 synchronized 关键字进行修饰，由于在执行此方法的时候需要获得对象锁，则执行起来比较慢。所以现在如果为了保证线程安全的话，使用 CurrentHashMap。 </li></ul></li></ul><h4 id="3-HashMap和ConcurrentHashMap"><a href="#3-HashMap和ConcurrentHashMap" class="headerlink" title="3. HashMap和ConcurrentHashMap"></a>3. HashMap和ConcurrentHashMap</h4><ul><li><strong>HashMap和Concurrent HashMap区别？</strong> <ul><li>HashMa p是非线程安全的，CurrentHashMap 是线程安全的。 </li><li>ConcurrentHashMap 将整个 Hash 桶进行了分段 segment，也就是将这个大的数组分成了几个小的片段segment，而且每个小的片段 segment 上面都有锁存在，那么在插入元素的时候就需要先找到应该插入到哪一个片段 segment，然后再在这个片段上面进行插入，而且这里还需要获取 segment 锁。 </li><li>ConcurrentHashMap 让锁的粒度更精细一些，并发性能更好。 </li></ul></li><li><strong>ConcurrentHashMap 线程安全吗， ConcurrentHashMap如何保证 线程安全？</strong> <ul><li>HashTable 容器在竞争激烈的并发环境下表现出效率低下的原因是所有访问 HashTable 的线程都必须竞争同一把锁，那假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效的提高并发访问效率，这就是 ConcurrentHashMap 所使用的<strong>分段锁</strong>，首先将数据分成一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据的时候，其他段的数据也能被其他线程访问。 </li><li>get 操作的高效之处在于整个 get 过程不需要加锁，除非读到的值是空的才会加锁重读。<strong>get 方法里将要使用的共享变量都定义成 volatile</strong>，如用于统计当前 Segement 大小的 count 字段和用于存储值的 HashEntry 的 value。定义成 volatile 的变量，能够在线程之间保持可见性，能够被多线程同时读，并且保证不会读到过期的值，但是只能被单线程写（有一种情况可以被多线程写，就是写入的值不依赖于原值），在 get 操作里只需要读不需要写共享变量 count 和 value，所以可以不用加锁。 </li><li>put 方法首先定位到 Segment，然后在 Segment 里进行插入操作。<ul><li>插入操作需要经历两个步骤：（1）判断是否需要对 Segment 里的 HashEntry 数组进行扩容；（2）定位添加元素的位置然后放在HashEntry数组里。 </li></ul></li></ul></li></ul><h4 id="4-Hashtable的原理"><a href="#4-Hashtable的原理" class="headerlink" title="4. Hashtable的原理"></a>4. Hashtable的原理</h4><p>Hashtable 使用链地址法进行元素存储，关键字：链地址，头插法。</p><p><strong>Hashtable 与 HashMap 的简单比较</strong></p><ol><li>HashTable 基于 Dictionary 类，而 HashMap 是基于 AbstractMap。Dictionary 是任何可将键映射到相应值的类的抽象父类，而 AbstractMap 是基于 Map 接口的实现，它以最大限度地减少实现此接口所需的工作。</li><li>HashMap 的 key 和 value 都允许为 null，而 Hashtable 的 key 和 value 都不允许为 null。HashMap 遇到 key 为 null 的时候，调用 putForNullKey 方法进行处理，而对 value 没有处理；Hashtable遇到 null，直接返回 NullPointerException。</li><li><strong>Hashtable 方法是同步，而HashMap则不是</strong>。我们可以看一下源码，Hashtable 中的几乎所有的 public 的方法都是 synchronized 的，而有些方法也是在内部通过 synchronized 代码块来实现。所以有人一般都建议如果是涉及到多线程同步时采用 HashTable，没有涉及就采用 HashMap，但是在 Collections 类中存在一个静态方法：<strong>synchronizedMap()</strong>，该方法创建了一个线程安全的 Map 对象，并把它作为一个封装的对象来返回。</li></ol><p><strong>参考资料：</strong></p><ul><li><a href="http://wiki.jikexueyuan.com/project/java-collection/hashtable.html" target="_blank" rel="noopener">Hashtable 的实现原理 - Java 集合学习指南 - 极客学院Wiki</a></li></ul><h4 id="5-Hash冲突的解决办法"><a href="#5-Hash冲突的解决办法" class="headerlink" title="5. Hash冲突的解决办法"></a>5. Hash冲突的解决办法</h4><ul><li>链地址法</li><li>开放地址法（向后一位）<ul><li>线性探测</li><li>平方探测</li><li>二次哈希</li></ul></li><li>再哈希法</li></ul><h4 id="6-什么是迭代器"><a href="#6-什么是迭代器" class="headerlink" title="6. 什么是迭代器"></a>6. 什么是迭代器</h4><p>　　Java 集合框架的集合类，我们有时候称之为容器。容器的种类有很多种，比如 ArrayList、LinkedList、HashSet…，每种容器都有自己的特点，ArrayList 底层维护的是一个数组；LinkedList 是链表结构的；HashSet 依赖的是哈希表，每种容器都有自己特有的数据结构。</p><p>　　因为容器的内部结构不同，很多时候可能不知道该怎样去遍历一个容器中的元素。所以为了使对容器内元素的操作更为简单，Java 引入了迭代器模式！ </p><p>　　把访问逻辑从不同类型的集合类中抽取出来，从而避免向外部暴露集合的内部结构。</p><p>　　<strong>迭代器模式</strong>：就是提供一种方法对一个容器对象中的各个元素进行访问，而又不暴露该对象容器的内部细。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用迭代器遍历ArrayList集合</span></span><br><span class="line">    Iterator&lt;String&gt; listIt = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(listIt.hasNext())&#123;</span><br><span class="line">        System.out.println(listIt.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用迭代器遍历Set集合</span></span><br><span class="line">    Iterator&lt;String&gt; setIt = set.iterator();</span><br><span class="line">    <span class="keyword">while</span>(setIt.hasNext())&#123;</span><br><span class="line">        System.out.println(listIt.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 使用迭代器遍历LinkedList集合</span></span><br><span class="line">    Iterator&lt;String&gt; linkIt = linkList.iterator();</span><br><span class="line">    <span class="keyword">while</span>(linkIt.hasNext())&#123;</span><br><span class="line">        System.out.println(listIt.hasNext());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考资料：</p><ul><li><a href="https://www.cnblogs.com/zyuze/p/7726582.html" target="_blank" rel="noopener">深入理解Java中的迭代器 - Mr·Dragon - 博客园</a></li></ul><h4 id="7-构造相同hash的字符串进行攻击，这种情况应该怎么处理？JDK7如何处理"><a href="#7-构造相同hash的字符串进行攻击，这种情况应该怎么处理？JDK7如何处理" class="headerlink" title="7. 构造相同hash的字符串进行攻击，这种情况应该怎么处理？JDK7如何处理"></a>7. 构造相同hash的字符串进行攻击，这种情况应该怎么处理？JDK7如何处理</h4><p><strong>攻击原理：</strong></p><p>　　当客户端发送一个请求到服务器，如果该请求中带有参数，服务器端会将 参数名-参数值 作为 key-value 保存在 HashMap 中。如果有人恶意构造请求，在请求中加入大量相同 hash 值的 String 参数名（key），那么在服务器端用于存储这些 key-value 对的 HashMap 会被强行退化成链表，如图：</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/.DTFINp98MPSDbx82xqvaPbaIwYYCs7rjJ9qdOmIkFI!/r/dDQBAAAAAAAA" alt="Hash攻击"></p><p>如果数据量足够大，那么在查找，插入时会占用大量 CPU，达到拒绝服务攻击的目的。</p><p><strong>怎么处理</strong></p><ol><li>限制 POST 和 GET 请求的参数个数</li><li>限制 POST 请求的请求体大小</li><li>Web Application FireWall（WAF）</li></ol><p><strong>JDK7如何处理</strong></p><p>HashMap 会动态的使用一个专门 TreeMap 实现来替换掉它。</p><h4 id="8-Hashmap为什么大小是2的幂次"><a href="#8-Hashmap为什么大小是2的幂次" class="headerlink" title="8. Hashmap为什么大小是2的幂次"></a>8. Hashmap为什么大小是2的幂次</h4><p>首先来看一下 hashmap 的 put 方法的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)                </span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);  <span class="comment">//将空key的Entry加入到table[0]中</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());  <span class="comment">//计算key.hashcode()的hash值，hash函数由hashmap自己实现</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);  <span class="comment">//获取将要存放的数组下标</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * for中的代码用于：当hash值相同且key相同的情况下，使用新值覆盖旧值（其实就是修改功能）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//注意：for循环在第一次执行时就会先判断条件</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K, V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="comment">//hash值相同且key相同的情况下，使用新值覆盖旧值</span></span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            <span class="comment">//e.recordAccess(this);</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;<span class="comment">//返回旧值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(hash, key, value, i);<span class="comment">//增加一个新的Entry到table[i]</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;<span class="comment">//如果没有与传入的key相等的Entry，就返回null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * "按位与"来获取数组下标</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hashmap 始终将自己的桶保持在2的幂次，这是为什么？indexFor这个方法解释了这个问题</strong></p><p>大家都知道计算机里面位运算是基本运算，位运算的效率是远远高于取余 % 运算的</p><p>举个例子：2的幂次 转换成二进制就是 1+n 个 0，减 1 之后就是 0+n个1，如16 -&gt; 10000，15 -&gt; 01111</p><p>那么根据 &amp; 位运算的规则，都为 1 (真)时，才为 1，那 0≤运算后的结果≤15，假设 h &lt;= 15，那么运算后的结果就是 h 本身，h &gt;15，运算后的结果就是最后四位二进制做 &amp; 运算后的值，最终，就是 % 运算后的余数。</p><p>当容量一定是 2的幂次时，h &amp; (length - 1) == h % length</p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题（二）</title>
      <link href="/2018/09/19/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2018/09/19/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Java基础面试题（二）</p><a id="more"></a><h3 id="操作系统中-heap-和-stack-的区别"><a href="#操作系统中-heap-和-stack-的区别" class="headerlink" title="操作系统中 heap 和 stack 的区别"></a>操作系统中 heap 和 stack 的区别</h3><p>堆为队列优先，先进先出（FIFO）。栈为先进后出（FILO）。<br> 一、空间分配：<br>​    1.堆（操作系统）：一般由程序员分配释放，若程序员不释放，程序结束时可能由OS回收，分配方式类似于链表。PS：java中都是系统GC，程序员无法进行GC。<br>​    2.栈（操作系统）：由操作系统自动分配释放，存放函数的参数值，局部变量值等。操作方式与数据结构中的栈相类似。<br>二、缓存方式：<br>​    1.堆：使用二级缓存，生命周期与虚拟机的GC算法有关（并不是引用为空就立即被GC），调用速度相对较低。<br>​    2.栈：使用一级缓存，被调用时通常处于存储空间中，调用后被立即释放。<br>三、数据结构：<br>​    1、堆（数据结构）：类似于树结构，可以类比于堆排序<br>​    2、栈（数据结构）：先进后出（FILO）<br>JAVA中的区别：<br>​    堆（heap）与栈（stack）都是java在RAM中用来存放数据的地方。与C++不同的是，java自动管理堆（heap）和（栈），程序员不能直接的设置堆和栈。<br>​    栈：在函数中定义的一些基本类型的变量和对象的引用变量都在函数的栈内存中分配。当在一段代码块中定义一个变量时，java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被用作他用。<br>​    堆：对内存用来存放由new创建的对象和数组，在堆中分配的内存，由java虚拟机的自动垃圾回收器来管理。在堆中产生一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中的这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。</p><h3 id="什么是对象关系映射ORM"><a href="#什么是对象关系映射ORM" class="headerlink" title="什么是对象关系映射ORM?"></a>什么是对象关系映射ORM?</h3><p>对象关系映射（Object Relational Mapping，简称ORM）是通过使用描述对象和数据库之间映射的元数据，将面向对象语言程序中的对象自动持久化到关系数据库中。本质上就是将数据从一种形式转换到另外一种形式。 </p><h3 id="什么是-Java-的反射机制"><a href="#什么是-Java-的反射机制" class="headerlink" title="什么是 Java 的反射机制"></a>什么是 Java 的反射机制</h3><p>  Java反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为Java语言的反射机制。 </p><h3 id="反射机制获取类有三种方法"><a href="#反射机制获取类有三种方法" class="headerlink" title="反射机制获取类有三种方法"></a>反射机制获取类有三种方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1 直接通过类名.Class的方式得到  </span></span><br><span class="line">   clazz = Person.class;  </span><br><span class="line">   System.out.println(<span class="string">"通过类名: "</span> + clazz);  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//2 通过对象的getClass()方法获取,这个使用的少（一般是传的是Object，不知道是什么类型的时候才用）  </span></span><br><span class="line">   Object obj = <span class="keyword">new</span> Person();  </span><br><span class="line">   clazz = obj.getClass();  </span><br><span class="line">   System.out.println(<span class="string">"通过getClass(): "</span> + clazz);  </span><br><span class="line"> </span><br><span class="line">   <span class="comment">//3 通过全类名获取，用的比较多，但可能抛出ClassNotFoundException异常  </span></span><br><span class="line">   clazz = Class.forName(<span class="string">"com.java.reflection.Person"</span>);  </span><br><span class="line">   System.out.println(<span class="string">"通过全类名获取: "</span> + clazz);</span><br></pre></td></tr></table></figure><h3 id="什么是数据库ACID"><a href="#什么是数据库ACID" class="headerlink" title="什么是数据库ACID?"></a>什么是数据库ACID?</h3><ul><li>ACID，指数据库事务正确执行的四个基本要素的缩写。包含：原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。 </li><li>一个支持事务（Transaction）的数据库，必须要具有这四种特性，否则在事务过程（Transaction processing）当中无法保证数据的正确性，交易过程极可能达不到交易方的要求。</li><li>Atomic（原子性）：指整个数据库事务是不可分割的工作单位。只有使据库中所有的操作执行成功，才算整个事务成功；事务中任何一个SQL语句执行失败，那么已经执行成功的SQL语句也必须撤销，数据库状态应该退回到执行事务前的状态。</li><li>Consistency（一致性）：指数据库事务不能破坏关系数据的完整性以及业务逻辑上的一致性。例如对银行转帐事务，不管事务成功还是失败，应该保证事务结束后ACCOUNTS表中Tom和Jack的存款总额为2000元。</li><li>Isolation（隔离性）：指的是在并发环境中，当不同的事务同时操纵相同的数据时，每个事务都有各自的完整数据空间。</li><li>Durability（持久性）：指的是只要事务成功结束，它对数据库所做的更新就必须永久保存下来。即使发生系统崩溃，重新启动数据库系统后，数据库还能恢复到事务成功结束时的状态。</li></ul><h3 id="BS与CS的联系与区别"><a href="#BS与CS的联系与区别" class="headerlink" title="BS与CS的联系与区别"></a>BS与CS的联系与区别</h3><p>  C/S是Client/Server的缩写。服务器通常采用高性能的PC、工作站或小型机，并采用大型数据库系统，如Oracle、Sybase、InFORMix或 SQL Server。客户端需要安装专用的客户端软件。<br>   B/Ｓ是Brower/Server的缩写，客户机上只要安装一个浏览器（Browser），如Netscape Navigator或Internet Explorer，服务器安装Oracle、Sybase、InFORMix或 SQL Server等数据库。在这种结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现。浏览器通过Ｗeb Server同数据库进行数据交互。</p><p>   C/S 与 B/S区别：<br>   １．  硬件环境不同:<br>   C/S 一般建立在专用的网络上,小范围里的网络环境,局域网之间再通过专门服务器提供连接和数据交换服务.<br>   B/S 建立在广域网之上的,不必是专门的网络硬件环境,例与电话上网,租用设备.信息自己管理.有比C/S更强的适应范围,一般只要有操作系统和浏览器就行<br>   ２．对安全要求不同<br>   C/S 一般面向相对固定的用户群,对信息安全的控制能力很强.一般高度机密的信息系统采用C/S结构适宜.可以通过B/S发布部分可公开信息.<br>   B/S 建立在广域网之上,对安全的控制能力相对弱,可能面向不可知的用户。<br>   ３．对程序架构不同<br>   C/S 程序可以更加注重流程,可以对权限多层次校验,对系统运行速度可以较少考虑.<br>   B/S 对安全以及访问速度的多重的考虑,建立在需要更加优化的基础之上.比C/S有更高的要求 B/S结构的程序架构是发展的趋势,从MS的.Net系列的BizTalk 2000Exchange 2000等,全面支持网络的构件搭建的系统. SUN和IBM推的JavaBean构件技术等,使 B/S更加成熟.<br>   ４．软件重用不同<br>   C/S 程序可以不可避免的整体性考虑,构件的重用性不如在B/S要求下的构件的重用性好.<br>   B/S 对的多重结构,要求构件相对独立的功能.能够相对较好的重用.就入买来的餐桌可以再利用,而不是做在墙上的石头桌子<br>   ５．系统维护不同<br>   C/S 程序由于整体性,必须整体考察,处理出现的问题以及系统升级.升级难.可能是再做一个全新的系统<br>   B/S 构件组成,方面构件个别的更换,实现系统的无缝升级.系统维护开销减到最小.用户从网上自己下载安装就可以实现升级.<br>   ６．处理问题不同<br>   C/S 程序可以处理用户面固定,并且在相同区域,安全要求高需求,与操作系统相关.应该都是相同的系统<br>   B/S 建立在广域网上,面向不同的用户群,分散地域,这是C/S无法作到的.与操作系统平台关系最小.<br>   ７．用户接口不同<br>   C/S 多是建立的Window平台上,表现方法有限,对程序员普遍要求较高<br>   B/S 建立在浏览器上,有更加丰富和生动的表现方式与用户交流.并且大部分难度减低,减低开发成本.<br>   ８．信息流不同<br>   C/S 程序一般是典型的中央集权的机械式处理,交互性相对低<br>   B/S 信息流向可变化, B-B B-C B-G等信息、流向的变化,更像交易中心。</p><h3 id="cookie-和session-的区别"><a href="#cookie-和session-的区别" class="headerlink" title="cookie 和session 的区别?"></a>cookie 和session 的区别?</h3><p>具体来说cookie机制采用的是在客户端保持状态的方案，而session机制采用的是在服务器端保持状态的方案。同时我们也看到，由于才服务器端保持状态的方案在客户端也需要保存一个标识，所以session机制可能需要借助于cookie机制来达到保存标识的目的，但实际上还有其他选择.</p><p>相同点：<br>cookie与session都是用来跟踪浏览器用户身份的会话方式。</p><p>不同点：<br>总的来说，cookie是采取的客户端保状态的会话方式，而session采取的是服务器保持状态的会话方式。 采用session的会话方式，用户量大时，因为数据保存在服务器，其服务器压力毫无疑问会比较大。还有其他的一些不同，如二者的存取方式等。</p><p>1、cookie数据存放在客户的浏览器上，session数据放在服务器上。</p><p>2、cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗<br>   考虑到安全应当使用session。</p><p>3、session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能<br>   考虑到减轻服务器性能方面，应当使用COOKIE。</p><p>4、单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p><p>5、所以个人建议：<br>   将登陆信息等重要信息存放为SESSION<br>   其他信息如果需要保留，可以放在COOKIE中</p><h3 id="fail-fast-与-fail-safe-机制有什么区别"><a href="#fail-fast-与-fail-safe-机制有什么区别" class="headerlink" title="fail-fast 与 fail-safe 机制有什么区别"></a>fail-fast 与 fail-safe 机制有什么区别</h3><p><a href="https://blog.csdn.net/ch717828/article/details/46892051" target="_blank" rel="noopener">java中fail-fast 和 fail-safe的区别</a></p><p>在我们详细讨论这两种机制的区别之前，首先得先了解并发修改。</p><ol><li>什么是同步修改？</li></ol><p>当一个或多个线程正在遍历一个集合Collection，此时另一个线程修改了这个集合的内容（添加，删除或者修改）。这就是并发修改</p><ol><li>什么是 fail-fast 机制?</li></ol><p>fail-fast机制在遍历一个集合时，当集合结构被修改，会抛出Concurrent Modification Exception。</p><p>fail-fast会在以下两种情况下抛出ConcurrentModificationException</p><p>（1）单线程环境</p><p>集合被创建后，在遍历它的过程中修改了结构。</p><p>注意 remove()方法会让expectModcount和modcount 相等，所以是不会抛出这个异常。</p><p>（2）多线程环境</p><p>当一个线程在遍历这个集合，而另一个线程对这个集合的结构进行了修改。</p><p>注意，迭代器的快速失败行为无法得到保证，因为一般来说，不可能对是否出现不同步并发修改做出任何硬性保证。快速失败迭代器会尽最大努力抛出 ConcurrentModificationException。因此，为提高这类迭代器的正确性而编写一个依赖于此异常的程序是错误的做法：迭代器的快速失败行为应该仅用于检测 bug。</p><ol><li>fail-fast机制是如何检测的？</li></ol><p>迭代器在遍历过程中是直接访问内部数据的，因此内部的数据在遍历的过程中无法被修改。为了保证不被修改，迭代器内部维护了一个标记 “mode” ，当集合结构改变（添加删除或者修改），标记”mode”会被修改，而迭代器每次的hasNext()和next()方法都会检查该”mode”是否被改变，当检测到被修改时，抛出Concurrent Modification Exception</p><ol><li>fail-safe机制</li></ol><p>fail-safe任何对集合结构的修改都会在一个复制的集合上进行修改，因此不会抛出ConcurrentModificationException</p><p>fail-safe机制有两个问题</p><p>（1）需要复制集合，产生大量的无效对象，开销大</p><p>（2）无法保证读取的数据是目前原始数据结构中的数据。</p><table><thead><tr><th></th><th>Fail Fast Iterator</th><th>Fail Safe Iterator</th></tr></thead><tbody><tr><td>Throw ConcurrentModification Exception</td><td>Yes</td><td>No</td></tr><tr><td>Clone object</td><td>No</td><td>Yes</td></tr><tr><td>Memory Overhead</td><td>No</td><td>Yes</td></tr><tr><td>Examples</td><td>HashMap,Vector,ArrayList,HashSet</td><td>CopyOnWriteArrayList, ConcurrentHashMap</td></tr></tbody></table><h3 id="get-和-post请求的区别"><a href="#get-和-post请求的区别" class="headerlink" title="get 和 post请求的区别"></a>get 和 post请求的区别</h3><p>   <a href="https://www.cnblogs.com/logsharing/p/8448446.html" target="_blank" rel="noopener">get 和 post请求的区别</a></p><p><em>GET</em> - 从指定的资源请求数据。</p><p><em>POST</em> - 向指定的资源提交要被处理的数据</p><ul><li><p>GET 方法</p><p>请注意，查询字符串（名称/值对）是在 GET 请求的 URL 中发送的：</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test/demo_form.asp?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><p>有关 GET 请求的其他一些注释：</p><ul><li><p>GET 请求可被缓存</p></li><li><p>GET 请求保留在浏览器历史记录中</p></li><li><p>GET 请求可被收藏为书签</p></li><li><p>GET 请求不应在处理敏感数据时使用</p></li><li><p>GET 请求有长度限制</p></li><li><p>GET 请求只应当用于取回数据</p></li><li><p>POST 方法</p><p>请注意，查询字符串（名称/值对）是在 POST 请求的 HTTP 消息主体中发送的：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test/demo_form.asp</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: w3schools.com</span><br><span class="line">name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><p>有关 POST 请求的其他一些注释：</p><ul><li>POST 请求不会被缓存</li><li>POST 请求不会保留在浏览器历史记录中</li><li>POST 不能被收藏为书签</li><li>POST 请求对数据长度没有要求</li></ul></li></ul><table><thead><tr><th></th><th style="text-align:center">GET</th><th>POST</th></tr></thead><tbody><tr><td>后退按钮/刷新</td><td style="text-align:center">无害</td><td>数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</td></tr><tr><td>缓存</td><td style="text-align:center">能被缓存</td><td>不能缓存</td></tr><tr><td>编码类型</td><td style="text-align:center">application/x-www-form-urlencoded</td><td>application/x-www-form-urlencoded 或 multipart/form-data。为二进制数据使用多重编码。</td></tr><tr><td>历史</td><td style="text-align:center">参数保留在浏览器历史中。</td><td>参数不会保存在浏览器历史中。</td></tr><tr><td>对数据长度的限制</td><td style="text-align:center">是的。当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。</td><td>无限制。</td></tr><tr><td>对数据类型的限制</td><td style="text-align:center">只允许 ASCII 字符。</td><td>没有限制。也允许二进制数据。</td></tr><tr><td>安全性</td><td style="text-align:center">与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！</td><td>POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</td></tr><tr><td>可见性</td><td style="text-align:center">数据在 URL 中对所有人都是可见的。</td><td>数据不会显示在 URL 中。</td></tr><tr><td>书签</td><td style="text-align:center">可收藏为书签</td><td>不可收藏为书签</td></tr></tbody></table><h3 id="Interface与abstract类的区别"><a href="#Interface与abstract类的区别" class="headerlink" title="Interface与abstract类的区别"></a>Interface与abstract类的区别</h3><p>  含有abstract修饰符的class即为抽象类，abstract 类不能创建的实例对象。含有abstract方法的类必须定义为abstract class，abstract class类中的方法不必是抽象的。abstract class类中定义抽象方法必须在具体(Concrete)子类中实现，所以，不能有抽象构造方法或抽象静态方法。如果的子类没有实现抽象父类中的所有抽象方法，那么子类也必须定义为abstract类型。</p><p>  　　接口（interface）可以说成是抽象类的一种特例，接口中的所有方法都必须是抽象的。<strong>接口中的方法定义默认为public abstract类型，接口中的成员变量类型默认为public static final</strong>。</p><p>  下面比较一下两者的语法区别：</p><ol><li>抽象类可以有构造方法，接口中不能有构造方法。</li><li>抽象类中可以有普通成员变量，接口中没有普通成员变量</li><li>抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。</li><li><p>抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然</p><p>eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。</p></li><li><p>抽象类中可以包含静态方法，接口中不能包含静态方法</p></li><li>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。</li><li><p>一个类可以实现多个接口，但只能继承一个抽象类。</p><p>下面接着再说说两者在应用上的区别：<br> 接口更多的是在系统架构设计方法发挥作用，主要用于定义模块之间的通信契约。而抽象类在代码实现方面发挥作用，可以实现代码的重用，例如，模板方法设计模式是抽象类的一个典型应用，假设某个项目的所有Servlet类都要用相同的方式进行权限判断、记录访问日志和处理异常，那么就可以定义一个抽象的基类，让所有的Servlet都继承这个抽象基类，在抽象基类的service方法中完成权限判断、记录访问日志和处理异常的代码，在各个子类中只是完成各自的业务逻辑代码。</p></li></ol><h3 id="WEB容器主要有哪些功能-并请列出一些常见的WEB容器名字。"><a href="#WEB容器主要有哪些功能-并请列出一些常见的WEB容器名字。" class="headerlink" title="WEB容器主要有哪些功能? 并请列出一些常见的WEB容器名字。"></a>WEB容器主要有哪些功能? 并请列出一些常见的WEB容器名字。</h3><p>  1) 提供Servlet程序编写API</p><p>   2) 提供Servlet程序运行时环境。 </p><p>   常见的有 Apache, IIS, Tomcat, Resin 等等 </p><h3 id="一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"><a href="#一个”-java”源文件中是否可以包含多个类（不是内部类）？有什么限制？" class="headerlink" title="一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？"></a>一个”.java”源文件中是否可以包含多个类（不是内部类）？有什么限制？</h3><p>可以，但一个源文件中最多只能有一个公开类（public class）而且文件名必须和公开类的类名完全保持一致。 </p><h3 id="请简述-Servlet-的生命周期及其相关的方法"><a href="#请简述-Servlet-的生命周期及其相关的方法" class="headerlink" title="请简述 Servlet 的生命周期及其相关的方法"></a>请简述 Servlet 的生命周期及其相关的方法</h3><ol><li><p>创建Servlet对象，通过服务器反射机制创建Servlet对象，第一次请</p><p>求时才会创建。（默认）</p></li><li><p>调用Servlet对象的init()方法，初始化Servlet的信息，init()方法只会在创建后被调用一次； </p></li><li><p>响应请求，调用service()或者是doGet()，doPost()方法来处理请求，这些方法是运行的在多线程状态下的。 </p></li><li><p>在长时间没有被调用或者是服务器关闭时，会调用destroy()方法来销毁Servlet对象。 </p></li></ol><h3 id="简述ajax的原理及实现步骤。"><a href="#简述ajax的原理及实现步骤。" class="headerlink" title="简述ajax的原理及实现步骤。"></a>简述ajax的原理及实现步骤。</h3><p>HTTP协议的异步通信</p><p>Ajax的原理简单来说通过XmlHttpRequest对象来向服务器发异步请求，从服务器获得数据，然后用javascript来操作DOM而更新页面。这其中最关键的一步就是页面的部分从服务器获得请求数据。实现方式就利用页面部分刷新数据来给用户更好的体验。其中 XMLHttpRequest 是ajax的核心机制，Ajax本身是很多技术的集合，里面有很多要说的，自己可以从一些ajax的实例学习下。</p><h3 id="什么是finalize-方法"><a href="#什么是finalize-方法" class="headerlink" title="什么是finalize()方法"></a>什么是finalize()方法</h3><p>类的finalize()方法，可以告诉垃圾回收器应该执行的操作，该方法从Object类继承而来。<br>在从堆中永久删除对象之前，垃圾回收器调用该对象的finalize()方法。注意，无法确切地保证垃圾回收器何时调用该方法，也无法保证调用不同对象的方法的顺序。即使一个对象包含另一个对象的引用，或者在释放一个对象很久以前就释放了另一个对象，也可能会以任意的顺序调用这两个对象的Finalize方法。如果必须保证采用特定的顺序，则必须提供自己的特有清理方法。<br>finalize()一般是用不到的，除非JVM认为已经没有内存可以使用了，那时JVM才会消耗资源去清理垃圾，所以finalize()也不能作为通用的清理方法。而且finalize()有一个比较另类的用法，就是说finalize()并不依赖对它的直接调用，它有某些触发机制，比如说对象已经标明要被终结，这时会自动执行finalize()。并不需要去显式的调用，这也是为什么代码中没有显式调用finalize()，但它确实执行了的原因，因为它触发了finalize()的执行条件。<br>其实不必太在意finalize()，因为一般的程序中是使用不到finalize()的，所以那些开发Java的大牛们把finalize()的用法整的很隐晦，而且它们把垃圾回收机制做的比较自动化，一般不需要手工清理。</p><h3 id="final关键字有哪些用法"><a href="#final关键字有哪些用法" class="headerlink" title="final关键字有哪些用法"></a>final关键字有哪些用法</h3><ol><li>用来修饰数据，包括成员变量和局部变量，该变量只能被赋值一次且它的值无法被改变。对于成员变量来讲，我们必须在声明时或者构造方法中对它赋值；</li><li>用来修饰方法参数，表示在变量的生存期中它的值不能被改变；</li><li>修饰方法，表示该方法无法被重写；</li><li>修饰类，表示该类无法被继承。</li></ol><p>上面的四种方法中，第三种和第四种方法需要谨慎使用，因为在大多数情况下，如果是仅仅为了一点设计上的考虑，我们并不需要使用final来修饰方法和类。</p><h3 id="main-方法为什么必须是静态的？能不能声明-main-方法为非静态"><a href="#main-方法为什么必须是静态的？能不能声明-main-方法为非静态" class="headerlink" title="main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态?"></a>main() 方法为什么必须是静态的？能不能声明 main() 方法为非静态?</h3><p>不能，main()方法必须声明为静态的，这样JVM才可以调用main()方法而无需实例化它的类。</p><p>如果从main()方法去掉“static”这个声明，虽然编译依然可以成功，但在运行时会导致程序失败。</p><ul><li><p>如果JVM找不到main方法就抛出NoSuchMethodError:main异常，例如：如果你运行命令：java HelloWrold，JVM就会在HelloWorld.class文件中搜索public static void main (String[] args) 放法</p></li><li><p>main方式是程序的入口，程序执行的开始处。</p></li><li><p>main方法被一个特定的线程”main”运行，程序会一直运行直到main线程结束或者non-daemon线程终止。</p></li><li><p>当你看到“Exception in Thread main”如：Excpetion in Thread main:Java.lang.NullPointedException ,意味着异常来自于main线程</p></li><li><p>你可以声明main方法使用java1.5的可变参数的方式如：</p><p>public  static void main(String… args)</p></li><li><p>除了static、void、和public，你可以使用final，synchronized、和strictfp修饰符在main方法的签名中，如：</p><p>public  strictfp final  synchronized static  void main(String[] args)</p></li><li><p>main方法在Java可以像其他方法一样被重载，但是JVM只会调用上面这种签名规范的main方法。</p></li><li><p>你可以使用throws子句在方法签名中，可以抛出任何checked和unchecked异常</p></li><li><p>静态初始化块在JVM调用main方法前被执行，它们在类被JVM加载到内存的时候就被执行了。</p></li></ul><h3 id="a-a-b-与-a-b-的区别"><a href="#a-a-b-与-a-b-的区别" class="headerlink" title="a = a + b 与 a += b 的区别"></a>a = a + b 与 a += b 的区别</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a+=b --&gt; a=(a.Type)a+b;<span class="comment">//返回的是a类型 </span></span><br><span class="line"></span><br><span class="line">a=a+b --&gt; a=a+b;<span class="comment">//返回类型是a类型与b类型中的最高类型</span></span><br></pre></td></tr></table></figure><p>如果有这样的代码:short a = a + 1;这句编译时会报错,因为a+1以后,类型强制转换为int,这是在赋值给short类型的a就错了,但是short a=1; a+=1;就不会报错</p><h3 id="3-0-1-0-3-将会返回什么？true-还是-false？"><a href="#3-0-1-0-3-将会返回什么？true-还是-false？" class="headerlink" title="3*0.1 == 0.3 将会返回什么？true 还是 false？"></a>3*0.1 == 0.3 将会返回什么？true 还是 false？</h3><p>false,有些浮点数不能完全精确的表示出来。为了解决基本数据类型浮点数不能进行精确计算的问题，Java中专门提供了java.math.BigDecimal类，其提供浮点数的精确计算功能。与BigInteger类相同，其运算操作均使用方法调用完成 </p><h3 id="基础类型-Primitives-与封装类型-Wrappers-的区别"><a href="#基础类型-Primitives-与封装类型-Wrappers-的区别" class="headerlink" title="基础类型(Primitives)与封装类型(Wrappers)的区别"></a>基础类型(Primitives)与封装类型(Wrappers)的区别</h3><p>一、传递方式不同<br>基本类型（原始数据类型）在传递参数时都是按值传递，而封装类型是按引用传递的(其实“引用也是按值传递的”，传递的是对象的地址)。由于包装类型都是不可变量，因此没有提供改变它值的方法，增加了对“按引用传递”的理解难度。</p><p>int是基本类型，直接存放数值；Integer是类，产生对象时用一个引用指向这个对象。</p><p>二、封装类可以有方法和属性<br>封装类可以有方法和属性，利用这些方法和属性来处理数据，如Integer.parseInt(Strings)。基本数据类型都是final修饰的，不能继承扩展新的类、新的方法。</p><p>三、默认值不同<br>基本类型跟封装类型的默认值是不一样的。如int i,i的预设为0；Integer j，j的预设为null,因为封装类产生的是对象，对象默认值为null。</p><p>四、存储位置<br>基本类型在内存中是存储在栈中，引用类型的引用（值的地址）存储在栈中，而实际的对象（值）是存在堆中。</p><p>虽然基本类型在栈上分配内存效率高，但是在堆栈上分配内存可能有内存泄漏的问题。</p><h3 id="float和double的默认值是多少"><a href="#float和double的默认值是多少" class="headerlink" title="float和double的默认值是多少"></a>float和double的默认值是多少</h3><p>单精度浮点型（float）的基本类型变量的默认值为0.0f；</p><p>双精度浮点型（double）的基本类型变量的默认值为0.0d；</p><h3 id="我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？"><a href="#我能在不进行强制转换的情况下将一个-double-值赋值给-long-类型的变量吗？" class="headerlink" title="我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？"></a>我能在不进行强制转换的情况下将一个 double 值赋值给 long 类型的变量吗？</h3><p> 不行，你不能在没有强制类型转换的前提下将一个 double 值赋值给 long 类型的变量，因为 double 类型的范围比 long 类型更广，所以必须要进行强制转换。 </p><h3 id="继承中类型转换的两种方式（向上转型、向下转型）"><a href="#继承中类型转换的两种方式（向上转型、向下转型）" class="headerlink" title="继承中类型转换的两种方式（向上转型、向下转型）"></a>继承中类型转换的两种方式（向上转型、向下转型）</h3><p>继承中类型转换的两种方式 </p><p>1.向上转型    将子类对象转换成父类类型，例如：   Pet pet=new Dog();   此类型转换为自动转换   因为子类的功能比父类更加强大，相当于让一个能力强的对象去做一件简单的事情，因此可以自动转换完成   </p><p>2.向下转型   将父类对象转换为子类类型，例如：   Pet pet=new Pet();   Dog dog=(Dog)pet;   此类型转换为强制转换   因为反之，父类的功能要弱于子类，因此需要强制转换 </p><h3 id="如何权衡是使用无序的数组还是有序的数组"><a href="#如何权衡是使用无序的数组还是有序的数组" class="headerlink" title="如何权衡是使用无序的数组还是有序的数组"></a>如何权衡是使用无序的数组还是有序的数组</h3><ul><li>有序数组最大的好处：在于查找的时间复杂度是O(log n)，而无序数组是O(n)。</li><li>有序数组的缺点是：插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)。</li></ul><h3 id="怎么判断数组是-null-还是为空"><a href="#怎么判断数组是-null-还是为空" class="headerlink" title="怎么判断数组是 null 还是为空"></a>怎么判断数组是 null 还是为空</h3><p>长度为0的数组，可以求数组长度，为0，即数组内没有元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] zero = new int[0];  //zero引用一个长度为0的数组对象1</span><br></pre></td></tr></table></figure><p>为null的数组，不能求数组长度，且求解时会出现空指针异常NullPointerException。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int[] zero = null;  //数组类型的空引用，不指向任何对象</span><br></pre></td></tr></table></figure><h3 id="Java数组的三种打印方式"><a href="#Java数组的三种打印方式" class="headerlink" title="Java数组的三种打印方式"></a>Java数组的三种打印方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//传统的for循环方式</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.length;i++)</span><br><span class="line">      System.out.println(a[i]);</span><br><span class="line"><span class="comment">//for each循环</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> a:array)</span><br><span class="line">    System.out.println(a);</span><br><span class="line"><span class="comment">//利用Array类中的toString方法</span></span><br><span class="line"><span class="keyword">int</span>[] array = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">System.out.println(Arrays.toString(array));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组整体右移K位问题</title>
      <link href="/2018/09/18/%E6%95%B0%E7%BB%84%E6%95%B4%E4%BD%93%E5%8F%B3%E7%A7%BBK%E4%BD%8D%E9%97%AE%E9%A2%98/"/>
      <url>/2018/09/18/%E6%95%B0%E7%BB%84%E6%95%B4%E4%BD%93%E5%8F%B3%E7%A7%BBK%E4%BD%8D%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>问题：<br> 如何把一个数组循环右移K位    如：12345678 右移2位  78123456 </p><a id="more"></a><p><strong>思路一：写一个方法，让数组右移一位，要求右移几位就调用多少次</strong></p><p><strong>思路二：我们先将数组分成两部分, 设后面K位为数组b, 前面length()-K位为数组a, 那么怎么数组的组成就是ab.原始数组是ab, 我的目的是将这个数组变成ba</strong></p><p><strong>第一步:将整个长度为N的数组倒置得到$b^{-1}$ $a^{-1}$</strong></p><p><strong>第二步:将$b^{-1}$数组和$a^{-1}$ 数组分别倒置, 得到 ba数组.</strong></p><p>具体代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShuZuYouYi</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">2</span>;<span class="comment">// 需要右移的位数</span></span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法一：暴力循环调用右移一次的函数</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"> youYiOnce(nums);</span><br><span class="line"> &#125;</span><br><span class="line"> System.out.println(Arrays.toString(nums));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二：</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将整个长度为N的数组倒置得到b^&#123;-1&#125;a^&#123;-1&#125;</span></span><br><span class="line">reverse(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">        <span class="comment">//将b^&#123;-1&#125;数组和a^&#123;-1&#125; 数组分别倒置, 得到 ba数组.</span></span><br><span class="line">reverse(nums, <span class="number">0</span>, k - <span class="number">1</span>);</span><br><span class="line">reverse(nums, k, nums.length - <span class="number">1</span>);</span><br><span class="line">System.out.println(Arrays.toString(nums));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//右移一次的函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">youYiOnce</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> last = nums[nums.length - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = nums.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">nums[i + <span class="number">1</span>] = nums[i];</span><br><span class="line">&#125;</span><br><span class="line">nums[<span class="number">0</span>] = last;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//转置数组的第start到end位</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = nums[start];</span><br><span class="line">nums[start] = nums[end];</span><br><span class="line">nums[end] = temp;</span><br><span class="line">start++;</span><br><span class="line">end--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java计算两个日期相隔的天数</title>
      <link href="/2018/09/18/Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9B%B8%E9%9A%94%E7%9A%84%E5%A4%A9%E6%95%B0/"/>
      <url>/2018/09/18/Java%E8%AE%A1%E7%AE%97%E4%B8%A4%E4%B8%AA%E6%97%A5%E6%9C%9F%E7%9B%B8%E9%9A%94%E7%9A%84%E5%A4%A9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>最近遇到了一个问题，如何计算给定两个日期之间隔了多少天，这在平时的项目和面试中也比较常见，总结一发。<br><a id="more"></a><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断两个日期之间相隔的天数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DayCount</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line"></span><br><span class="line">SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd"</span>);</span><br><span class="line">Date date1 = format.parse(<span class="string">"1999-09-09"</span>);</span><br><span class="line">Date date2 = format.parse(<span class="string">"2011-11-11"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(differentDays(date1, date2));<span class="comment">//4446</span></span><br><span class="line">System.out.println(differentDaysByMillisecond(date1, date2));<span class="comment">//4446</span></span><br><span class="line">System.out.println(differentDaysByCalendar(date1, date2));<span class="comment">//4446</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * date2比date1多的天数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">differentDays</span><span class="params">(Date date1, Date date2)</span> </span>&#123;</span><br><span class="line">Calendar cal1 = Calendar.getInstance();</span><br><span class="line">cal1.setTime(date1);</span><br><span class="line"></span><br><span class="line">Calendar cal2 = Calendar.getInstance();</span><br><span class="line">cal2.setTime(date2);</span><br><span class="line"><span class="keyword">int</span> day1 = cal1.get(Calendar.DAY_OF_YEAR);<span class="comment">// 这一天是一年中的第几天</span></span><br><span class="line"><span class="keyword">int</span> day2 = cal2.get(Calendar.DAY_OF_YEAR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> year1 = cal1.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">int</span> year2 = cal2.get(Calendar.YEAR);</span><br><span class="line"><span class="keyword">if</span> (year1 != year2) &#123;</span><br><span class="line"><span class="keyword">int</span> timeDistance = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = year1; i &lt; year2; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">100</span> != <span class="number">0</span> || i % <span class="number">400</span> == <span class="number">0</span>) <span class="comment">// 闰年</span></span><br><span class="line">&#123;</span><br><span class="line">timeDistance += <span class="number">366</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="comment">// 不是闰年</span></span><br><span class="line">&#123;</span><br><span class="line">timeDistance += <span class="number">365</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> timeDistance + (day2 - day1);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"判断day2 - day1 : "</span> + (day2 - day1));</span><br><span class="line"><span class="keyword">return</span> day2 - day1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过时间秒毫秒数判断两个时间的间隔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">differentDaysByMillisecond</span><span class="params">(Date date1, Date date2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> days = (<span class="keyword">int</span>) ((date2.getTime() - date1.getTime()) / (<span class="number">1000</span> * <span class="number">3600</span> * <span class="number">24</span>));</span><br><span class="line"><span class="keyword">return</span> days;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">differentDaysByCalendar</span><span class="params">(Date date1, Date date2)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.setTime(date1);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (calendar.getTime().compareTo(date2) != <span class="number">0</span>) &#123;</span><br><span class="line">calendar.add(Calendar.DATE, <span class="number">1</span>);<span class="comment">//calendar.add(*,-1)即是减去。calendar没有减法</span></span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
            <tag> 日期计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题（一）</title>
      <link href="/2018/09/17/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2018/09/17/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>Java基础面试题（一）</p><a id="more"></a><h5 id="Java基本类型占用的字节数："><a href="#Java基本类型占用的字节数：" class="headerlink" title="Java基本类型占用的字节数："></a>Java基本类型占用的字节数：</h5><p>1字节： byte , boolean<br>2字节： short , char<br>4字节： int , float<br>8字节： long , double<br>注：1字节(byte)=8位(bits)  </p><h5 id="在Java语言中，字符串”Java程序员”在内存中所占用的字节数是：（D）。"><a href="#在Java语言中，字符串”Java程序员”在内存中所占用的字节数是：（D）。" class="headerlink" title="在Java语言中，字符串”Java程序员”在内存中所占用的字节数是：（D）。"></a>在Java语言中，字符串”Java程序员”在内存中所占用的字节数是：（D）。</h5><ul><li>A. 10  </li><li>B. 7  </li><li>C. 13</li><li>D. 14<h5 id="int与integer的对比？"><a href="#int与integer的对比？" class="headerlink" title="int与integer的对比？"></a>int与integer的对比？</h5></li></ul><ol><li>Integer是int的包装类；int是基本数据类型； </li><li>Integer变量必须实例化后才能使用；int变量不需要； </li><li>Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ； </li><li>Integer的默认值是null；int的默认值是0。<br><u>注意：integer类中的内部类，是处理Integer的缓存，cache的大小为256，static块中是对cache赋值从-128(包含)~127(包含)，所以上面的例子可以得出100在范围以内不会产生新的对象，直接返回缓存中的对象，200不在范围内会产生新的对象，注意Integer的缓存数据是不会被垃圾回收。</u><h5 id="能将-int-强制转换为-byte类型的变量吗？如果该值大于byte类型的范围，将会出现什么现象？"><a href="#能将-int-强制转换为-byte类型的变量吗？如果该值大于byte类型的范围，将会出现什么现象？" class="headerlink" title="能将 int 强制转换为 byte类型的变量吗？如果该值大于byte类型的范围，将会出现什么现象？"></a>能将 int 强制转换为 byte类型的变量吗？如果该值大于byte类型的范围，将会出现什么现象？</h5>我们可以做强制转换，但是 Java 中 int 是 32 位的，而 byte 是 8 位的，所以，如果强制转化，int 类型的高 24 位将会被丢弃，因为byte 类型的范围是从 -128到127。<h5 id="一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"><a href="#一个”-java”源文件中是否可以包括多个类（不是内部类）？有什么限制？" class="headerlink" title="一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？"></a>一个”.java”源文件中是否可以包括多个类（不是内部类）？有什么限制？</h5>可以有多个类，但只能有一个public的类，并且public的类名必须与文件名相一致。<h5 id="在JAVA中如何跳出当前的多重嵌套循环？"><a href="#在JAVA中如何跳出当前的多重嵌套循环？" class="headerlink" title="在JAVA中如何跳出当前的多重嵌套循环？"></a>在JAVA中如何跳出当前的多重嵌套循环？</h5></li><li><p>在Java中，要想跳出多重循环，可以在外面的循环语句前定义一个标号，然后在里层循环体的代码中使用带有标号的break语句，即可跳出外层循环。<br>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ok: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">System.out.println(<span class="string">"i="</span> + i + <span class="string">",j="</span> + j);</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">5</span>)</span><br><span class="line"><span class="keyword">break</span> ok;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>另外，通常并不使用标号这种方式，而是让外层的循环条件表达式的结果可以受到里层循环体代码的控制，例如，要在二维数组中查找到某个数字。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[][] = &#123; &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> &#125;, &#123; <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span> &#125;, &#123; <span class="number">9</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">boolean</span> found = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length &amp;&amp; !found; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; arr[i].length; j++) &#123;</span><br><span class="line">System.out.println(<span class="string">"i="</span> + i + <span class="string">",j="</span> + j);</span><br><span class="line"><span class="keyword">if</span> (arr[i][j] == <span class="number">5</span>) &#123;</span><br><span class="line">found = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h5 id="switch语句能否作用在byte上，能否作用在long上，能否作用在String上"><a href="#switch语句能否作用在byte上，能否作用在long上，能否作用在String上" class="headerlink" title="switch语句能否作用在byte上，能否作用在long上，能否作用在String上?"></a>switch语句能否作用在byte上，能否作用在long上，能否作用在String上?</h5><p>在switch（e）中，e只能是一个整数表达式或者枚举常量（Java1.7以后支持String），整数表达式可以是int基本类型或Integer包装类型，由于byte,short,char都可以隐含转换为int，（String和enum也可以用在switch语句上）所以，这些类型以及这些类型的包装类型也是可以的。显然，long不符合switch的语法规定，并且不能被隐式转换成int类型，所以，它们不能作用于swtich语句中。<br>注意：switch在没有break的情况下会依次执行后面所有的case！！！</p><h5 id="short-s1-1-s1-s1-1；有什么错-short-s1-1-s1-1-有什么错-没有错"><a href="#short-s1-1-s1-s1-1；有什么错-short-s1-1-s1-1-有什么错-没有错" class="headerlink" title="short s1= 1; s1 = s1+1；有什么错? short s1 = 1; s1 += 1;有什么错?(没有错)"></a>short s1= 1; s1 = s1+1；有什么错? short s1 = 1; s1 += 1;有什么错?(没有错)</h5><p>对于short s1 = 1; s1 = s1 + 1;由于s1+1 运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。<br>对于short s1= 1; s1 += 1;由于 += 是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。<br><u>注意：s1++；也是可以通过编译的！</u></p><h5 id="使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"><a href="#使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？" class="headerlink" title="使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？"></a>使用final关键字修饰一个变量时，是引用不能变，还是引用的对象不能变？</h5><p>使用final关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。例如，对于如下语句：</p><blockquote><p> final StringBuffer a=new StringBuffer(“immutable”);</p></blockquote><p>执行如下语句将报告编译期错误：</p><blockquote><p>a=new StringBuffer(“”);</p></blockquote><p>但是，执行如下语句则可以通过编译：</p><blockquote><p>a.append(“ broken!”);</p></blockquote><h5 id="是否可以从一个static方法内部发出对非static方法的调用？"><a href="#是否可以从一个static方法内部发出对非static方法的调用？" class="headerlink" title="是否可以从一个static方法内部发出对非static方法的调用？"></a>是否可以从一个static方法内部发出对非static方法的调用？</h5><p>不可以。因为非static方法是要与对象关联在一起的，必须创建一个对象后，才可以在该对象上进行方法调用，而static方法调用时不需要创建对象，可以直接调用。也就是说，当一个static方法被调用时，可能还没有创建任何实例对象，如果从一个static方法中发出对非static方法的调用，那个非static方法是关联到哪个对象上的呢？这个逻辑无法成立，所以，一个static方法内部发出对非static方法的调用。<br>注意：Java类的加载顺序一般是：父类的静态变量（静态代码块）—&gt;子类的静态变量（静态代码块）—&gt;父类的构造方法—&gt;子类的构造方法。</p><h5 id="Math类中提供了三个与取整有关的方法：ceil、floor、round怎么使用？"><a href="#Math类中提供了三个与取整有关的方法：ceil、floor、round怎么使用？" class="headerlink" title="Math类中提供了三个与取整有关的方法：ceil、floor、round怎么使用？"></a>Math类中提供了三个与取整有关的方法：ceil、floor、round怎么使用？</h5><p> Math.ceil()表示向上取整 Math.ceil(1.1)结果是2，Math.ceil(-1.1)结果是-1。<br> Math.floor()表示向下取整 Math.floor(1.1)结果是1，Math.floor(-1.1)结果是-2。<br> Math.round()表示四舍五入取整  Math.round(1.1)结果是1，Math.round(-1.5)结果是-1。<br> <u>注意：四舍五入的原理是在参数上加 0.5然后进行向下取整。</u>  </p><h5 id="Overload和Override的区别？"><a href="#Overload和Override的区别？" class="headerlink" title="Overload和Override的区别？"></a>Overload和Override的区别？</h5><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Overload</th><th style="text-align:center">Override</th></tr></thead><tbody><tr><td style="text-align:center">中文名</td><td style="text-align:center">重载</td><td style="text-align:center">重写/覆盖</td></tr><tr><td style="text-align:center">发生范围</td><td style="text-align:center">一个类中</td><td style="text-align:center">父类与子类之间</td></tr><tr><td style="text-align:center">方法的参数</td><td style="text-align:center">参数个数，类型，顺序至少有一个不相同</td><td style="text-align:center">参数个数，类型，顺序都是必须和父 类方法一致的</td></tr><tr><td style="text-align:center">方法返回值</td><td style="text-align:center">返回值可以同或者不同（不能重载只有返回值不同的方法名）</td><td style="text-align:center">返回值必须相同</td></tr><tr><td style="text-align:center">final修饰</td><td style="text-align:center">可以重载</td><td style="text-align:center">不可以重写</td></tr><tr><td style="text-align:center">异常</td><td style="text-align:center">方法的异常类型和数目不会对重载造成影响</td><td style="text-align:center">子类方法不能抛出比父类方法更多的异常(但子类方法可以不抛出异常)</td></tr></tbody></table><p><u>注意：被覆盖的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行覆盖。</u></p><h5 id="接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concreteclass-抽象类中是否可以有静态的main方法？"><a href="#接口是否可继承接口-抽象类是否可实现-implements-接口-抽象类是否可继承具体类-concreteclass-抽象类中是否可以有静态的main方法？" class="headerlink" title="接口是否可继承接口?抽象类是否可实现(implements)接口?抽象类是否可继承具体类(concreteclass)?抽象类中是否可以有静态的main方法？"></a>接口是否可继承接口?抽象类是否可实现(implements)接口?抽象类是否可继承具体类(concreteclass)?抽象类中是否可以有静态的main方法？</h5><p>接口可以继承接口。抽象类可以实现(implements)接口，抽象类可以继承具体类。抽象类中可以有静态的main方法。<br>注意：抽象类与普通类的唯一区别就是不能创建实例对象和允许有abstract方法。</p><h5 id="抽象类和接口语法上有什么区别"><a href="#抽象类和接口语法上有什么区别" class="headerlink" title="抽象类和接口语法上有什么区别?"></a>抽象类和接口语法上有什么区别?</h5><ol><li>抽象类可以有构造方法，接口中不能有构造方法。  </li><li>抽象类中可以有普通成员变量，接口中没有普通成员变量（必须是public static final修饰）。  </li><li>抽象类中可以包含非抽象的普通方法，接口中的所有方法必须都是抽象的，不能有非抽象的普通方法。  </li><li>抽象类中的抽象方法的访问类型可以是public，protected和（默认类型,虽然eclipse下不报错，但应该也不行），但接口中的抽象方法只能是public类型的，并且默认即为public abstract类型。  </li><li>抽象类中可以包含静态方法，接口中不能包含静态方法。  </li><li>抽象类和接口中都可以包含静态成员变量，抽象类中的静态成员变量的访问类型可以任意，但接口中定义的变量只能是public static final类型，并且默认即为public static final类型。  </li><li>一个类可以实现多个接口，但只能继承一个抽象类。<h5 id="Java中实现多态的机制是什么？"><a href="#Java中实现多态的机制是什么？" class="headerlink" title="Java中实现多态的机制是什么？"></a>Java中实现多态的机制是什么？</h5>靠的是父类或接口定义的引用变量可以指向子类或具体实现类的实例对象，而程序调用的方法在运行期才动态绑定，就是引用变量所指向的具体实例对象的方法，也就是内存里正在运行的那个对象的方法，而不是引用变量的类型中定义的方法。</li></ol><h5 id="new-一个对象的过程和-clone-一个对象的过程区别？"><a href="#new-一个对象的过程和-clone-一个对象的过程区别？" class="headerlink" title="new 一个对象的过程和 clone 一个对象的过程区别？"></a>new 一个对象的过程和 clone 一个对象的过程区别？</h5><p>new 操作符的本意是分配内存。程序执行到 new 操作符时，首先去看 new 操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。<br>clone 在第一步是和 new 相似的，都是分配内存，调用 clone 方法时，分配的内存和原对象（即调用 clone 方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域，填充完成之后， clone 方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p><h5 id="什么是深拷贝什么是浅拷贝？"><a href="#什么是深拷贝什么是浅拷贝？" class="headerlink" title="什么是深拷贝什么是浅拷贝？"></a>什么是深拷贝什么是浅拷贝？</h5><p>Person 中有两个成员变量，分别是 name 和 age， name 是 String 类型， age 是 int 类型。代码非常简单，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.age = age;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (Person) <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 age 是基本数据类型， 那么对它的拷贝没有什么疑议，直接将一个 4 字节的整数值拷贝过来就行。但是 name<br>是 String 类型的， 它只是一个引用， 指向一个真正的 String 对象，那么对它的拷贝有两种方式： 直接将原对象中<br>的 name 的引用值拷贝给新对象的 name 字段， 或者是根据原 Person 对象中的 name 指向的字符串对象创建一个<br>新的相同的字符串对象，将这个新字符串对象的引用赋给新拷贝的 Person 对象的 name 字段。这两种拷贝方式分别<br>叫做浅拷贝和深拷贝。深拷贝和浅拷贝的原理如下图所示：<br><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/yXufE0zkjwkvtHHDnXf9jzOgwFhcb*jR7bLgy57eii8!/b/dDIBAAAAAAAA&amp;bo=kwNxApMDcQIDByI!&amp;rf=viewer_4" alt="image"></p><h5 id="如何进行深拷贝？"><a href="#如何进行深拷贝？" class="headerlink" title="如何进行深拷贝？"></a>如何进行深拷贝？</h5><p> 由上一节的内容可以得出如下结论：如果想要深拷贝一个对象，这个对象必须要实现 Cloneable 接口，实现 clone方法，并且在 clone 方法内部，把该对象引用的其他对象也要 clone 一份，这就要求这个被引用的对象必须也要实现Cloneable 接口并且实现 clone 方法。那么，按照上面的结论，实现以下代码 Body 类组合了 Head 类，要想深拷贝Body 类，必须在 Body 类的 clone 方法中将 Head 类也要拷贝一份。代码如下：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span>  <span class="class"><span class="keyword">class</span> <span class="title">Head</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;  </span><br><span class="line"><span class="keyword">public</span> Face face;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Head</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">Body body = <span class="keyword">new</span> Body(<span class="keyword">new</span> Head(<span class="keyword">new</span> Face()));</span><br><span class="line">Body body1 = (Body) body.clone();</span><br><span class="line">System.out.println(<span class="string">"body == body1 : "</span> + (body == body1));</span><br><span class="line">System.out.println(<span class="string">"body.head == body1.head : "</span> + (body.head == body1.head));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为：</p><ol><li>body == body1 : false</li><li>body.head == body1.head : false</li></ol>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常见的数字转换</title>
      <link href="/2018/09/13/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/09/13/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E6%95%B0%E5%AD%97%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<p>Java常见的数字转换</p><a id="more"></a><h3 id="int与String的互相转换"><a href="#int与String的互相转换" class="headerlink" title="int与String的互相转换"></a>int与String的互相转换</h3><h4 id="int转String"><a href="#int转String" class="headerlink" title="int转String"></a>int转String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">String string = <span class="keyword">new</span> String();</span><br><span class="line"></span><br><span class="line">string = String.valueOf(i);</span><br><span class="line">string = i + <span class="string">""</span>;</span><br><span class="line">string = Integer.toBinaryString(i);</span><br></pre></td></tr></table></figure><h4 id="String转int"><a href="#String转int" class="headerlink" title="String转int"></a>String转int</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">String string = <span class="keyword">new</span> String(<span class="string">"12345"</span>);</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">i = Integer.valueOf(string);</span><br><span class="line">i = Integer.parseInt(string);</span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><h4 id="把10进制底下的数字1011，转换为2，8，16进制"><a href="#把10进制底下的数字1011，转换为2，8，16进制" class="headerlink" title="把10进制底下的数字1011，转换为2，8，16进制"></a>把10进制底下的数字1011，转换为2，8，16进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"把十进制的101，转化成2,8,16进制。"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(Integer.toBinaryString(<span class="number">1011</span>));<span class="comment">// 转换成二进制1111110011</span></span><br><span class="line">System.out.println(Integer.toOctalString(<span class="number">1011</span>));<span class="comment">// 转换成八进制1763</span></span><br><span class="line">System.out.println(Integer.toHexString(<span class="number">1011</span>));<span class="comment">// 转换成十六进制3f3</span></span><br><span class="line"><span class="comment">//把十进制转换成任意进制 例：10进制1011转成7进制2643</span></span><br><span class="line">System.out.println(Integer.toString(<span class="number">1011</span>, <span class="number">7</span>));转换成七进制<span class="number">2643</span></span><br></pre></td></tr></table></figure><h4 id="把2，8，16进制底下的101，转换成10进制"><a href="#把2，8，16进制底下的101，转换成10进制" class="headerlink" title="把2，8，16进制底下的101，转换成10进制"></a>把2，8，16进制底下的101，转换成10进制</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="string">"把2，8，16进制底下的1011，转换成10进制"</span>);</span><br><span class="line"><span class="comment">//此方法可以把任意进制都可以转换成十进制（十六进制英文字母大小写皆可）</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"1011"</span>,<span class="number">2</span>));<span class="comment">// 二进制转换成十进制11</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"1011"</span>,<span class="number">8</span>));<span class="comment">// 八进制转换成十进制521</span></span><br><span class="line">System.out.println(Integer.parseInt(<span class="string">"1011"</span>,<span class="number">16</span>));<span class="comment">// 十六进制转换成十进制4113</span></span><br></pre></td></tr></table></figure><h3 id="浮点型保留两位小数显示"><a href="#浮点型保留两位小数显示" class="headerlink" title="浮点型保留两位小数显示"></a>浮点型保留两位小数显示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> pi = <span class="number">3.141592653589793</span>;<span class="comment">// 3.14</span></span><br><span class="line"></span><br><span class="line">System.out.println(((<span class="keyword">double</span>) Math.round(pi * <span class="number">100</span>) / <span class="number">100</span>)); <span class="comment">// 如果要精确到4位就是 *10000/10000</span></span><br><span class="line">System.out.println(String.format(<span class="string">"%.2f"</span>, pi)); <span class="comment">// %表示小数点前任意位数2表示两位小数f表示浮点型</span></span><br><span class="line"></span><br><span class="line">DecimalFormat decimalFormat = <span class="keyword">new</span> DecimalFormat(<span class="string">".00"</span>);<span class="comment">// 如果小数点后不足两位会自动补0 ，写成".##"则不会</span></span><br><span class="line">System.out.println(decimalFormat.format(pi));</span><br></pre></td></tr></table></figure><h3 id="int和char的互相转换"><a href="#int和char的互相转换" class="headerlink" title="int和char的互相转换"></a>int和char的互相转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">char</span> ch = (<span class="keyword">char</span>) (n + <span class="string">'0'</span>);</span><br><span class="line"></span><br><span class="line">String strnum=n+<span class="string">""</span>;</span><br><span class="line"><span class="keyword">char</span>[] chars=strnum.toCharArray();</span><br><span class="line">chars[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//////////////////////////////////</span></span><br><span class="line"><span class="keyword">char</span> ch = <span class="string">'9'</span>;</span><br><span class="line"><span class="keyword">int</span> n = ch - <span class="string">'0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = Integer.parseInt(String.valueOf(ch));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常见的设计模式</title>
      <link href="/2018/09/12/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/09/12/Java%E5%B8%B8%E8%A7%81%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>Java 中一般认为有 23 种设计模式，我们不需要所有的都会，但是其中常用的几种设计模式应该去掌握。下面列出了所有的设计模式。</p><a id="more"></a><p>总体来说设计模式分为三大类：</p><p> 创建型模式，共五种： 工厂方法模式、 抽象工厂模式、 单例模式、 建造者模式、原型模式。</p><p> 结构型模式，共七种： 适配器模式、装饰器模式、 代理模式、外观模式、桥接模式、组合模式、 享元模式。</p><p> 行为型模式，共十一种： 策略模式、模板方法模式、 观察者模式、迭代子模式、责任链模式、命令模式、备忘录模 式、状态模式、访问者模式、中介者模式、解释器模式。</p><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 instance = <span class="keyword">new</span> Singleton1();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有化构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回对象实例</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> instance;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//懒汉模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton2 singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 私有构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供对外方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (singleton == <span class="keyword">null</span>) &#123;</span><br><span class="line">singleton = <span class="keyword">new</span> Singleton2();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> singleton;</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//注意，这不是线程安全的，有可能会问线程安全相关</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//双重检验锁模式（double checked locking pattern，DCL）</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//声明成 volatile</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span> <span class="params">()</span></span>&#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;                         </span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;       </span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transportation</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tansprot</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Transportation</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tansprot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小汽车带你飞"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span> <span class="keyword">implements</span> <span class="title">Transportation</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tansprot</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"小轮船带你游！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="comment">//普通工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportationFactory</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Transportation <span class="title">transportationMaker</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"Car"</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Ship"</span>.equals(type)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Ship();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="comment">//多个工厂方法模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportationFactory2</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Transportation <span class="title">carFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Transportation <span class="title">shipFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Ship();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.factory;</span><br><span class="line"><span class="comment">//静态工厂模式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransportationFactory3</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transportation <span class="title">carFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Transportation <span class="title">shipFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Ship();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//还有抽象工厂模式。工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能， 直接增加新的工厂类就可以了，不需要修改之前的代码。</span></span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToTurkey</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> <span class="keyword">implements</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToTurkey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我开着小汽车带你去浪漫的土耳其！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ship</span> <span class="keyword">implements</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToTurkey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"我开着泰坦尼克号带你到浪漫的土耳其！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="comment">//静态代理，缺点是每个类都需要一个代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LandProxy</span> <span class="keyword">implements</span> <span class="title">Travel</span> </span>&#123;</span><br><span class="line">Car c = <span class="keyword">new</span> Car();</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ToTurkey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">c.ToTurkey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="comment">//动态代理。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NBProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Object tar;</span><br><span class="line">    <span class="comment">//绑定委托对象，并返回代理类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object tar)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.tar = tar;</span><br><span class="line">        <span class="comment">//绑定该类实现的所有接口，取得代理类 </span></span><br><span class="line"><span class="keyword">return</span> Proxy.newProxyInstance(tar.getClass().getClassLoader(), tar.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//这里就可以进行所谓的AOP编程了</span></span><br><span class="line">        <span class="comment">//在调用具体函数方法前，执行功能处理</span></span><br><span class="line">Object result = method.invoke(tar, args);</span><br><span class="line">        <span class="comment">//在调用具体函数方法后，执行功能处理</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//测试静态代理</span></span><br><span class="line"> LandProxy land = <span class="keyword">new</span> LandProxy();</span><br><span class="line"> land.ToTurkey();</span><br><span class="line"><span class="comment">//测试动态代理</span></span><br><span class="line">NBProxy proxy = <span class="keyword">new</span> NBProxy();</span><br><span class="line">Travel t = (Travel) proxy.bind(<span class="keyword">new</span> Ship());</span><br><span class="line">t.ToTurkey();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//手写一个ArrayList的动态代理类</span></span><br><span class="line"><span class="keyword">package</span> my.proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestProxy</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 手写一个list的动态代理</span></span><br><span class="line"><span class="keyword">final</span> List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">List&lt;String&gt; proxyInstance = (List&lt;String&gt;) Proxy.newProxyInstance(list.getClass().getClassLoader(),</span><br><span class="line">list.getClass().getInterfaces(),              <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"><span class="keyword">return</span> method.invoke(list, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">proxyInstance.add(<span class="string">"nihao"</span>);</span><br><span class="line">System.out.println(list);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法盘点</title>
      <link href="/2018/09/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E7%9B%98%E7%82%B9/"/>
      <url>/2018/09/10/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E5%A4%A7%E7%9B%98%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p>算法第一课一般都是从排序算法开始讲起的，现在来稍微盘点一下各种排序算法。</p><a id="more"></a><h3 id="各种排序算法大比武"><a href="#各种排序算法大比武" class="headerlink" title="各种排序算法大比武"></a>各种排序算法大比武</h3><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/NxHAz3ENVHfjVL0CDc6Gr6aOtD5Jn5K6dlZKOCvQIZ0!/r/dDEBAAAAAAAA" alt="排序算法比较"> </p><h3 id="选择排序（Selection-Sort）"><a href="#选择排序（Selection-Sort）" class="headerlink" title="选择排序（Selection Sort）"></a>选择排序（Selection Sort）</h3><p>选择出数组中的最小元素，将它与数组的第一个元素交换位置。再从剩下的元素中选择出最小的元素，将它与数组的第二个元素交换位置。不断进行这样的操作，直到将整个数组排序。 </p><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/YV9tnBeeATgqzB5xz36IXrPQhJQq4jtJ*LIxXPqCMPU!/b/dFIBAAAAAAAA&amp;bo=KwP4ACsD.AACSW0!&amp;rf=viewer_4" alt="选择排序"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 寻找[i, n)区间里的最小值的索引</span></span><br><span class="line">        <span class="keyword">int</span> minIndex = i;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[minIndex] &gt; arr[j])&#123;</span><br><span class="line">                minIndex = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        swap( arr , i , minIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong></p><p>表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p><h3 id="插入排序（Insertion-Sort）"><a href="#插入排序（Insertion-Sort）" class="headerlink" title="插入排序（Insertion Sort）"></a>插入排序（Insertion Sort）</h3><p>插入排序从左到右进行，每次都将当前元素插入到左侧已经排序的数组中，使得插入之后左部数组依然有序。</p><p>第 j 元素是通过不断向左比较并交换来实现插入过程：当第 j 元素小于第 j - 1 元素，就将它们的位置交换，然后令 j 指针向左移动一个位置，不断进行以上操作。</p><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/zL5OCxqeFlrhi4Yvqt7hV7IlHGYOBaDEfdlwHByFmIo!/b/dDUBAAAAAAAA&amp;bo=KwP5ASsD.QECOR0!&amp;rf=viewer_4" alt="插入排序"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &lt; arr[j - <span class="number">1</span>])</span><br><span class="line">                swap(arr, j, j - <span class="number">1</span>); <span class="comment">// 大量的交换会消耗时间</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改进版插入排序（减少了数组元素的操作次数）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">better_sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> e = arr[i];</span><br><span class="line">        <span class="keyword">int</span> j = i;</span><br><span class="line">        <span class="keyword">for</span> (; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e &lt; arr[j - <span class="number">1</span>])</span><br><span class="line">                arr[j] = arr[j - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arr[j] = e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong></p><p>插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p><h3 id="冒泡排序（Bubble-Sort）"><a href="#冒泡排序（Bubble-Sort）" class="headerlink" title="冒泡排序（Bubble Sort）"></a>冒泡排序（Bubble Sort）</h3><p>通过从左到右不断交换相邻逆序的相邻元素，在一轮的交换之后，可以让未排序的元素上浮到右侧。</p><p>在一轮循环中，如果没有发生交换，就说明数组已经是有序的，此时可以直接退出。</p><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/aOGOUsorlHlBsmkCLfRocLV4iAjHHSdSTyuDwMWfRVE!/b/dDUBAAAAAAAA&amp;bo=OgMBAToDAQECOR0!&amp;rf=viewer_4" alt="冒泡排序"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = arr.length - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123; <span class="comment">// 从最后一位开始确定</span></span><br><span class="line">        <span class="keyword">boolean</span> swapped = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                swapped = <span class="keyword">true</span>;</span><br><span class="line">                swap(arr,j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!swapped)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="希尔排序（Shell-Sort）"><a href="#希尔排序（Shell-Sort）" class="headerlink" title="希尔排序（Shell Sort）"></a>希尔排序（Shell Sort）</h3><p>1959年Shell发明，第一个突破O(n2)的排序算法，是简单插入排序的改进版。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫<strong>缩小增量排序</strong>。</p><p><strong>算法描述</strong></p><p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p><ul><li>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li><li>按增量序列个数k，对序列进行k 趟排序；</li><li>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li></ul><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/WbpvOOUMKcbzCu*7ExpJMjzqcof2U69m1jwix.iIJDs!/b/dEcBAAAAAAAA&amp;bo=mQIiAZkCIgECaU0!&amp;rf=viewer_4" alt="希尔排序"></p><p><strong>代码实现</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希尔排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> h = n / <span class="number">2</span>; h &gt; <span class="number">0</span>; h = h / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 内部是一个插入排序</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i = i + h) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> e = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt; <span class="number">0</span>; j = j - h) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e &lt; arr[j - h])</span><br><span class="line">                    arr[j] = arr[j - h];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            arr[j] = e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 希尔排序2</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = arr.length;</span><br><span class="line">    <span class="comment">// 计算 increment sequence: 1, 4, 13, 40, 121, 364, 1093...</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (h &lt; n / <span class="number">3</span>) h = <span class="number">3</span> * h + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    System.out.println(h);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (h &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// h-sort the array</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = h; i &lt; n; i++) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 对 arr[i], arr[i-h], arr[i-2*h], arr[i-3*h]... 使用插入排序</span></span><br><span class="line">            <span class="keyword">int</span> e = arr[i];</span><br><span class="line">            <span class="keyword">int</span> j = i;</span><br><span class="line">            <span class="keyword">for</span> (; j &gt;= h &amp;&amp; e &lt; arr[j - h]; j -= h)</span><br><span class="line">                arr[j] = arr[j - h];</span><br><span class="line">            arr[j] = e;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h /= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>算法分析</strong></p><p>对于大规模的数组，插入排序很慢，因为它只能交换相邻的元素，每次只能将逆序数量减少 1。</p><p>希尔排序的出现就是为了改进插入排序的这种局限性，它通过交换不相邻的元素，每次可以将逆序数量减少大于 1。</p><p>希尔排序使用插入排序对间隔 h 的序列进行排序。通过不断减小 h，最后令 h=1，就可以使得整个数组是有序的。</p><h3 id="归并排序（Merge-Sort）"><a href="#归并排序（Merge-Sort）" class="headerlink" title="归并排序（Merge Sort）"></a>归并排序（Merge Sort）</h3><p>归并排序的思想是将数组分成两部分，分别进行排序，然后归并起来。把长度为n的输入序列分成两个长度为n/2的子序列；对这两个子序列分别采用归并排序；将两个排序好的子序列合并成一个最终的排序序列。</p><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/derTFgU.GPvvPdOzG61BA3nh0vlHtER2WB4A8xwjgF4!/b/dDIBAAAAAAAA&amp;bo=KwP5ASsD.QECOR0!&amp;rf=viewer_4" alt="归并排序"></p><p><strong>代码实现</strong></p><blockquote><p>1.归并方法</p><p>归并方法将数组中两个已经排序的部分归并成一个。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    __MergeSort(arr, <span class="number">0</span>, arr.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">__MergeSort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">    __MergeSort(arr, l, mid);</span><br><span class="line">    __MergeSort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">    merge(arr, l, mid, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将arr[l...mid]和arr[mid+1...r]两部分进行归并</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> mid, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] aux = Arrays.copyOfRange(arr, l, r + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化，i指向左半部分的起始索引位置l；j指向右半部分起始索引位置mid+1</span></span><br><span class="line">    <span class="keyword">int</span> i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt; mid) &#123;  <span class="comment">// 如果左半部分元素已经全部处理完毕</span></span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r) &#123;   <span class="comment">// 如果右半部分元素已经全部处理完毕</span></span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &lt; aux[j - l]) &#123;  <span class="comment">// 左半部分所指元素 &lt; 右半部分所指元素</span></span><br><span class="line">            arr[k] = aux[i - l];</span><br><span class="line">            i++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  <span class="comment">// 左半部分所指元素 &gt;= 右半部分所指元素</span></span><br><span class="line">            arr[k] = aux[j - l];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.自底向上归并排序</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N = arr.length;</span><br><span class="line">    <span class="keyword">int</span>[] aux = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> sz = <span class="number">1</span>; sz &lt; N; sz += sz)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i + sz &lt; N; i += sz + sz)</span><br><span class="line">            merge(arr, i, i + sz - <span class="number">1</span>, Math.min(i + sz + sz - <span class="number">1</span>, N - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序（Quick-Sort）"><a href="#快速排序（Quick-Sort）" class="headerlink" title="快速排序（Quick Sort）"></a>快速排序（Quick Sort）</h3><p>快速排序可以说是20世纪最伟大的算法之一了。相信都有所耳闻，它的速度也正如它的名字那样，是一个非常快的算法了。当然它也后期经过了不断的改进和优化，才被公认为是一个值得信任的非常优秀的算法。</p><p><img src="http://m.qpic.cn/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/pd5IzBeVhNW4VOXFht36KEbPCnPd.qhaH7i2tirsEZE!/b/dFUAAAAAAAAA&amp;bo=KwP8ACsD*AACOR0!&amp;rf=viewer_4" alt="快速排序"></p><p><strong>代码实现</strong></p><h4 id="1-普通快速排序"><a href="#1-普通快速排序" class="headerlink" title="1. 普通快速排序"></a>1. 普通快速排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = partition(arr,l,r);</span><br><span class="line">    QuickSort(arr,l,p-<span class="number">1</span>);</span><br><span class="line">    QuickSort(arr,p+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组通过p分割成两部分</span></span><br><span class="line"><span class="comment">// 对arr[l...r]部分进行partition操作</span></span><br><span class="line"><span class="comment">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    swap(arr, l, (<span class="keyword">int</span>) (Math.random() % (r - l + <span class="number">1</span>)) + l);  <span class="comment">// 加入这一行变成随机快速排序</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line">    <span class="keyword">int</span> j = l;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = j +<span class="number">1</span>;i&lt;=r;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; v)&#123;</span><br><span class="line">            j++;</span><br><span class="line">            swap(arr,i,j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap(arr,l,j);</span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速排序是原地排序，不需要辅助数组，但是递归调用需要辅助栈。</p><p>快速排序最好的情况下是每次都正好能将数组对半分，这样递归调用次数才是最少的。这种情况下比较次数为 CN=2CN/2+N，复杂度为 O(NlogN)。</p><p>最坏的情况下，第一次从最小的元素切分，第二次从第二小的元素切分，如此这般。因此最坏的情况下需要比较 N2/2。为了防止数组最开始就是有序的，在进行快速排序时需要随机打乱数组。</p><h4 id="2-双路快速排序"><a href="#2-双路快速排序" class="headerlink" title="2. 双路快速排序"></a>2. 双路快速排序</h4><p>若果数组中含有大量重复的元素，则partition很可能把数组划分成两个及其不平衡的两部分，时间复杂度退化成O(n²)。这时候应该把小于v和大于v放在数组两端。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/qOx3ZGM.Q7rctahPmjDSgEtPW9ElmIUxwjcdSmHQpV4!/r/dFIBAAAAAAAA" alt="双路快排"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 双路快速排序的partition</span></span><br><span class="line"><span class="comment">// 返回p, 使得arr[l...p-1] &lt; arr[p] ; arr[p+1...r] &gt; arr[p]</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span></span><br><span class="line">    <span class="comment">// swap(arr, l, (int) (Math.random() % (r - l + 1)) + l);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// arr[l+1...i) &lt;= v; arr(j...r] &gt;= v</span></span><br><span class="line">    <span class="keyword">int</span> i = l + <span class="number">1</span>, j = r;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">        <span class="comment">// 注意这里的边界, arr[i].compareTo(v) &lt; 0, 不能是arr[i].compareTo(v) &lt;= 0</span></span><br><span class="line">        <span class="comment">// 思考一下为什么?</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt;= r &amp;&amp; arr[i] &lt; v)</span><br><span class="line">            i++;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意这里的边界, arr[j].compareTo(v) &gt; 0, 不能是arr[j].compareTo(v) &gt;= 0</span></span><br><span class="line">        <span class="comment">// 思考一下为什么?</span></span><br><span class="line">        <span class="keyword">while</span> (j &gt;= l + <span class="number">1</span> &amp;&amp; arr[j] &gt; v)</span><br><span class="line">            j--;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于上面的两个边界的设定, 有的同学在课程的问答区有很好的回答:)</span></span><br><span class="line">        <span class="comment">// 大家可以参考: http://coding.imooc.com/learn/questiondetail/4920.html</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; j)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        </span><br><span class="line">        swap(arr, i, j);</span><br><span class="line">        i++;</span><br><span class="line">        j--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    swap(arr, l, j);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort2Ways</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 对于小规模数组, 使用插入排序</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> p = partition(arr, l, r);</span><br><span class="line">    QuickSort2Ways(arr, l, p - <span class="number">1</span>);</span><br><span class="line">    QuickSort2Ways(arr, p + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-三路快速排序"><a href="#3-三路快速排序" class="headerlink" title="3. 三路快速排序"></a>3. 三路快速排序</h4><p>数组分成三个部分，大于v 等于v 小于v</p><p>在具有大量重复键值对的情况下使用三路快排</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/yVHsV635.YSKc8pNUwGU*kbQTlj.MyOwIl5ihuAjKL4!/r/dFIBAAAAAAAA" alt="三路快排"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归使用快速排序,对arr[l...r]的范围进行排序</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">QuickSort3Ways</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 随机在arr[l...r]的范围中, 选择一个数值作为标定点pivot</span></span><br><span class="line">    swap( arr, l, (<span class="keyword">int</span>)(Math.random()*(r-l+<span class="number">1</span>)) + l );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> v = arr[l];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> lt = l;     <span class="comment">// arr[l+1...lt] &lt; v</span></span><br><span class="line">    <span class="keyword">int</span> gt = r + <span class="number">1</span>; <span class="comment">// arr[gt...r] &gt; v</span></span><br><span class="line">    <span class="keyword">int</span> i = l+<span class="number">1</span>;    <span class="comment">// arr[lt+1...i) == v</span></span><br><span class="line">    <span class="keyword">while</span>( i &lt; gt )&#123;</span><br><span class="line">        <span class="keyword">if</span>( arr[i] &lt; v)&#123;</span><br><span class="line">            swap( arr, i, lt+<span class="number">1</span>);</span><br><span class="line">            i ++;</span><br><span class="line">            lt ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>( arr[i] &gt; v )&#123;</span><br><span class="line">            swap( arr, i, gt-<span class="number">1</span>);</span><br><span class="line">            gt --;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123; <span class="comment">// arr[i] == v</span></span><br><span class="line">            i ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    swap( arr, l, lt );</span><br><span class="line"></span><br><span class="line">    QuickSort3Ways(arr, l, lt-<span class="number">1</span>);</span><br><span class="line">    QuickSort3Ways(arr, gt, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆排序（Heap-Sort）"><a href="#堆排序（Heap-Sort）" class="headerlink" title="堆排序（Heap Sort）"></a>堆排序（Heap Sort）</h3><h4 id="1-堆"><a href="#1-堆" class="headerlink" title="1. 堆"></a>1. 堆</h4><p>堆的某个节点的值总是大于等于子节点的值，并且堆是一颗完全二叉树。</p><p>堆可以用数组来表示，因为堆是完全二叉树，而完全二叉树很容易就存储在数组中。位置 k 的节点的父节点位置为 k/2，而它的两个子节点的位置分别为 2k 和 2k+1。这里不使用数组索引为 0 的位置，是为了更清晰地描述节点的位置关系。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/SJnsOdMESxzcanQb5Zff9m1PWcvETjWcZqUhzOG8LrY!/r/dDQBAAAAAAAA" alt="堆"></p><h4 id="2-上浮和下沉"><a href="#2-上浮和下沉" class="headerlink" title="2. 上浮和下沉"></a>2. 上浮和下沉</h4><p>在堆中，当一个节点比父节点大，那么需要交换这个两个节点。交换后还可能比它新的父节点大，因此需要不断地进行比较和交换操作，把这种操作称为<strong>上浮（ShiftUp）</strong>。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/P1R6qKYyIG2cvmg4iwq311KwKxl3kHHtkQASAay.YyQ!/r/dFIBAAAAAAAA" alt="上浮"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftUp</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( k &gt; <span class="number">1</span> &amp;&amp; data[k/<span class="number">2</span>] &lt; data[k]))&#123;</span><br><span class="line">        swap(k, k/<span class="number">2</span>);</span><br><span class="line">        k /= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似地，当一个节点比子节点来得小，也需要不断地向下进行比较和交换操作，把这种操作称为<strong>下沉（Shift Down）</strong>。一个节点如果有两个子节点，应当与两个子节点中最大那么节点进行交换。</p><p><img src="http://r.photo.store.qq.com/psb?/932c31e8-a24c-44e8-b0eb-07a959965080/Q2F4.olX0m5xGkcelT5Zl7kkA62Qv9sWv.oIAEKKf7E!/r/dDYBAAAAAAAA" alt="下沉"> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>( <span class="number">2</span>*k &lt;= count )&#123; <span class="comment">// 当前结点有左孩子</span></span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">2</span>*k; <span class="comment">// 在此轮循环中,data[k]和data[j]交换位置</span></span><br><span class="line">        <span class="keyword">if</span>( j+<span class="number">1</span> &lt;= count &amp;&amp; data[j+<span class="number">1</span>] &gt; data[j] )</span><br><span class="line">            j ++;</span><br><span class="line">        <span class="comment">// data[j] 是 data[2*k]和data[2*k+1]中的最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( data[k] &gt;= data[j] ) </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        swap(k, j);</span><br><span class="line">        k = j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-插入元素"><a href="#3-插入元素" class="headerlink" title="3.插入元素"></a>3.插入元素</h4><p>将新元素放到数组末尾，然后上浮到合适的位置。  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向最大堆中插入一个新的元素 item</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">(Item item)</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count + <span class="number">1</span> &lt;= capacity;</span><br><span class="line">    data[count+<span class="number">1</span>] = item;</span><br><span class="line">    count ++;</span><br><span class="line">    shiftUp(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-删除最大元素"><a href="#4-删除最大元素" class="headerlink" title="4. 删除最大元素"></a>4. 删除最大元素</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从最大堆中取出堆顶元素, 即堆中所存储的最大数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">extractMax</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">assert</span> count &gt; <span class="number">0</span>;</span><br><span class="line">    Item ret = data[<span class="number">1</span>];</span><br><span class="line">    </span><br><span class="line">    swap( <span class="number">1</span> , count );</span><br><span class="line">    count --;</span><br><span class="line">    shiftDown(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-堆排序"><a href="#5-堆排序" class="headerlink" title="5. 堆排序"></a>5. 堆排序</h4><p>由于堆可以很容易得到最大的元素并删除它，不断地进行这种操作可以得到一个递减序列。如果把最大元素和当前堆中数组的最后一个元素交换位置，并且不删除它，那么就可以得到一个从尾到头的递减序列，从正向来看就是一个递增序列。因此很容易使用堆来进行排序。并且堆排序是原地排序，不占用额外空间。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不使用一个额外的最大堆, 直接在原数组上进行原地的堆排序</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeapSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对整个arr数组使用HeapSort1排序</span></span><br><span class="line">    <span class="comment">// HeapSort1, 将所有的元素依次添加到堆中, 在将所有元素从堆中依次取出来, 即完成了排序</span></span><br><span class="line">    <span class="comment">// 无论是创建堆的过程, 还是从堆中依次取出元素的过程, 时间复杂度均为O(nlogn)</span></span><br><span class="line">    <span class="comment">// 整个堆排序的整体时间复杂度为O(nlogn)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort1</span><span class="params">(Comparable[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line">        MaxHeap&lt;Comparable&gt; maxHeap = <span class="keyword">new</span> MaxHeap&lt;Comparable&gt;(n);</span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i ++ )</span><br><span class="line">            maxHeap.insert(arr[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = n-<span class="number">1</span> ; i &gt;= <span class="number">0</span> ; i -- )</span><br><span class="line">            arr[i] = maxHeap.extractMax();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只通过shiftDown操作进行排序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort2</span><span class="params">(Comparable[] arr)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = arr.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 注意，此时我们的堆是从0开始索引的</span></span><br><span class="line">        <span class="comment">// 从(最后一个元素的索引-1)/2开始</span></span><br><span class="line">        <span class="comment">// 最后一个元素的索引 = n-1</span></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = (n-<span class="number">1</span>-<span class="number">1</span>)/<span class="number">2</span> ; i &gt;= <span class="number">0</span> ; i -- )</span><br><span class="line">            shiftDown2(arr, n, i);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = n-<span class="number">1</span>; i &gt; <span class="number">0</span> ; i-- )&#123; <span class="comment">// 这个的目的是让序列从小到大排序</span></span><br><span class="line">            swap( arr, <span class="number">0</span>, i);</span><br><span class="line">            shiftDown2(arr, i, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 交换堆中索引为i和j的两个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(Object[] arr, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">        Object t = arr[i];</span><br><span class="line">        arr[i] = arr[j];</span><br><span class="line">        arr[j] = t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 原始的shiftDown过程</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k+<span class="number">1</span> &lt; n )&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( j+<span class="number">1</span> &lt; n &amp;&amp; arr[j+<span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span> )</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( arr[k].compareTo(arr[j]) &gt;= <span class="number">0</span> )<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            swap( arr, k, j);</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优化的shiftDown过程, 使用赋值的方式取代不断的swap,</span></span><br><span class="line">    <span class="comment">// 该优化思想和我们之前对插入排序进行优化的思路是一致的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shiftDown2</span><span class="params">(Comparable[] arr, <span class="keyword">int</span> n, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Comparable e = arr[k];</span><br><span class="line">        <span class="keyword">while</span>( <span class="number">2</span>*k+<span class="number">1</span> &lt; n )&#123;</span><br><span class="line">            <span class="keyword">int</span> j = <span class="number">2</span>*k+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>( j+<span class="number">1</span> &lt; n &amp;&amp; arr[j+<span class="number">1</span>].compareTo(arr[j]) &gt; <span class="number">0</span> )</span><br><span class="line">                j += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>( e.compareTo(arr[j]) &gt;= <span class="number">0</span> )</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            arr[k] = arr[j];</span><br><span class="line">            k = j;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        arr[k] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 测试 HeapSort</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Integer[] arr = &#123;<span class="number">10</span>, <span class="number">91</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        HeapSort.sort2(arr);</span><br><span class="line">        PrintHelper.printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-堆排序的应用——Top-K问题"><a href="#6-堆排序的应用——Top-K问题" class="headerlink" title="6. 堆排序的应用——Top K问题"></a>6. 堆排序的应用——Top K问题</h4><p>例如，有1亿个浮点数，如何找出其中最大的10000个？</p><h3 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h3><p><strong>算法描述</strong><br>1.计数排序是一种非常快捷的稳定性强的排序方法，时间复杂度O(n+k),其中n为要排序的数的个数，k为要排序的数的组大值。计数排序对一定量的整数排序时候的速度非常快，一般快于其他排序算法。但计数排序局限性比较大，只限于对整数进行排序。计数排序是消耗空间发杂度来获取快捷的排序方法，其空间发展度为O（K）同理K为要排序的最大值。</p><p>2.计数排序的基本思想为一组数在排序之前先统计这组数中其他数小于这个数的个数，则可以确定这个数的位置。例如要排序的数为 7 4 2 1 5 3 1 5；则比7小的有7个数，所有7应该在排序好的数列的第八位，同理3在第四位，对于重复的数字，1在1位和2位（暂且认为第一个1比第二个1小），5和1一样位于6位和7位。</p><p>3.计数排序的实现办法：</p><p>　　首先需要三个数组，第一个数组记录A要排序的数列大小为n，第二个数组B要记录比某个数小的其他数字的个数所以第二个数组的大小应当为K（数列中最大数的大小），第三个数组C为记录排序好了的数列的数组，大小应当为n。</p><p>　　接着需要确定数组最大值并确定B数组的大小。并对每个数由小到大的记录数列中每个数的出现次数。因为是有小到大通过出现次数可以通过前面的所有数的出现次数来确定比这个数小的数的个数，从而确定其位置。</p><p>　　对于重复的数，每排好一个数则对其位置数进行减减操作，以此对完成其余相同的数字进行排位。</p><p><strong>代码实现</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> *a = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span> *c = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, n*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">        max = a[i]&gt;max ? a[i] : max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span>[max+<span class="number">1</span>];</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0</span>, (max+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[a[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; max + <span class="number">1</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[i] = b[i] + b[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        b[a[i]]--;</span><br><span class="line">        c[b[a[i]]] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">delete</span>[]a;</span><br><span class="line">    <span class="keyword">delete</span>[]b;</span><br><span class="line">    <span class="keyword">delete</span>[]c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><p>10<br>2 1 3 4 2 5 6 1 8 11<br>1<br>1<br>2<br>2<br>3<br>4<br>5<br>6<br>8<br>11<br>请按任意键继续. . .</p><p>这就是传说中的时间复杂度只有O（n）的排序算法；</p><h3 id="排序算法总结"><a href="#排序算法总结" class="headerlink" title="排序算法总结"></a>排序算法总结</h3><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">原地排序</th><th style="text-align:center">额外空间</th><th style="text-align:center">稳定排序</th></tr></thead><tbody><tr><td style="text-align:center">插入排序</td><td style="text-align:center">O(n^2)</td><td style="text-align:center">√</td><td style="text-align:center">O(1)</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">×</td><td style="text-align:center">O(n)</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">√</td><td style="text-align:center">O(logn)</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(nlogn)</td><td style="text-align:center">√</td><td style="text-align:center">O(1)</td><td style="text-align:center">×</td></tr></tbody></table><p>稳定排序：对于相等的元素，在排序后，原来靠前的元素依然靠前。相等元素的相对位置没有发生变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过⾃自定义⽐比较函数，让排序算法不不存在稳定性的问题。</span></span><br><span class="line">bool operator&lt;(<span class="keyword">const</span> Student&amp; otherStudent)&#123;</span><br><span class="line">    <span class="keyword">return</span> score != otherStudent.score ?</span><br><span class="line">    score &gt; otherStudent.score :</span><br><span class="line">    name &lt; otherStudent.name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/onepixel/articles/7674659.html" target="_blank" rel="noopener">十大经典排序算法（动图演示）</a></p>]]></content>
      
      
      <categories>
          
          <category> 默认分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
